<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叶绿素b的博客</title>
  
  
  <link href="https://yebingiscn.github.io/atom.xml" rel="self"/>
  
  <link href="https://yebingiscn.github.io/"/>
  <updated>2024-01-27T16:44:58.358Z</updated>
  <id>https://yebingiscn.github.io/</id>
  
  <author>
    <name>叶绿素b</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>标签生产回归自动化脚本</title>
    <link href="https://yebingiscn.github.io/2024/01/28/%E6%A0%87%E7%AD%BE%E7%94%9F%E4%BA%A7%E5%9B%9E%E5%BD%92%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <id>https://yebingiscn.github.io/2024/01/28/%E6%A0%87%E7%AD%BE%E7%94%9F%E4%BA%A7%E5%9B%9E%E5%BD%92%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</id>
    <published>2024-01-27T16:28:59.000Z</published>
    <updated>2024-01-27T16:44:58.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签生产回归自动化脚本"><a href="#标签生产回归自动化脚本" class="headerlink" title="标签生产回归自动化脚本"></a>标签生产回归自动化脚本</h1><blockquote><p>诞生原因：</p><ol><li>标签特别是离线标签上线往往是扎堆上线，回归测试以往都是手工。时间较长，也比较耗费测试人员精力</li><li>Doris 迁移需要迁移后的数据和已上线的数据进行对比</li><li>之前的实时标签新策略，开发希望测试环境和生产环境的比较有多少差异</li></ol></blockquote><h2 id="以往生产回归流程"><a href="#以往生产回归流程" class="headerlink" title="以往生产回归流程"></a>以往生产回归流程</h2><ol><li>运行源表 SQL，获取 ID 和标签值</li><li>将 ID 和标签值复制到请求体中</li><li>登录跳板机，将请求体粘贴到跳板机，查看并对比返回值<blockquote><p>总结：可以看到大部分都是固定的，只有一小部分需要手工操作。这种是使用自动化的完美范例</p></blockquote></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line">curl --location --request POST &#x27;http<span class="punctuation">:</span><span class="comment">//xxx:8082/lpm-api/portrait/v1/singleQuery&#x27; --header &#x27;Content-Type: application/json&#x27; --data &#x27;&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1459928190774</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;1afa2ff8c41cc0bccfcc1f2e4ba194e2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span><span class="string">&quot;ttvoice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;entityDomain&quot;</span><span class="punctuation">:</span><span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;entityId&quot;</span><span class="punctuation">:</span> <span class="number">271607410</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;labelNames&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;caller&quot;</span><span class="punctuation">:</span><span class="string">&quot;tt-aq&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ex&quot;</span><span class="punctuation">:</span><span class="string">&quot;tt&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>&#x27;</span><br></pre></td></tr></table></figure><h2 id="脚本对生产环境影响的思考"><a href="#脚本对生产环境影响的思考" class="headerlink" title="脚本对生产环境影响的思考"></a>脚本对生产环境影响的思考</h2><p>之前对数脚本都是循环点查接口获取标签值，但是在生产环境就不太现实，容易对接口造成一定的压力，这里使用了标签画像平台开放接口提供的多实体多标签查询接口，只需要点查一次接口就可以返回全部数据。另外脚本在实际使用中，一般用于生产回归，只查询 5 个 UID，预计影响不大。</p><h2 id="脚本用到的-Python-包："><a href="#脚本用到的-Python-包：" class="headerlink" title="脚本用到的 Python 包："></a>脚本用到的 Python 包：</h2><h3 id="Paramiko"><a href="#Paramiko" class="headerlink" title="Paramiko"></a>Paramiko</h3><p>Paramiko 是一个用于 SSH 和 SFTP 的 Python 编写的模块。使用 Paramiko 模块能够轻松地编写 Python 脚本来控制 SSH 会话并执行命令或传输文件等操作。</p><blockquote><p>在脚本编写中用于连接跳板机。</p></blockquote><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3><p>Pandas（Python Data Analysis Library）是一个开源数据分析和处理工具，它提供了一种高效地处理各种格式数据的方式，包括数据读写、数据清洗、数据整合与分析等，在数据分析、科学计算、商业处理等方面得到了广泛的应用。</p><blockquote><p>在脚本编写中用于读写文件，保存结果。</p></blockquote><h2 id="整合现有框架"><a href="#整合现有框架" class="headerlink" title="整合现有框架"></a>整合现有框架</h2><p>对数脚本已经实现了连接 BQ 并运行 SQL 获取结果的能力，怎么将其和对数脚本结合起来避免重复造轮子呢？（因为前文提到生产回归得从 BQ 获取数据再去跳板机查询）</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>生产回归自动化脚本作为对数脚本的一个新功能</li><li>在对数脚本中新增了 template_sql.py 作为连接生产自动化脚本和对数脚本的中间件，作为查询 SQL 和组装返回值的模板<br>a. 原有对数脚本引擎部分进行解耦，使 bq_get_datas.get_datas_to_csv 能使用所有的引擎（原来是只支持 Hive，Presto），详细可看对数脚本升级计划（施工中）<br>使用方便：每次只需要将标签名和源表的 SQL 贴过来就可以了（还有选择下引擎）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> com.enum.engine_enum <span class="keyword">import</span> Engine</span><br><span class="line"><span class="keyword">from</span> com.label <span class="keyword">import</span> bq_get_datas</span><br><span class="line"><span class="keyword">from</span> com.label.production_environment_automatic <span class="keyword">import</span> connect_production_environment</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    file_name = <span class="string">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span> <span class="comment"># 标签名</span></span><br><span class="line">    source_file = <span class="string">&quot;../file/source_&quot;</span> + <span class="built_in">str</span>(file_name) + <span class="string">&quot;.csv&quot;</span> <span class="comment"># 获取源表的文件名</span></span><br><span class="line">    hql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT user_id,</span></span><br><span class="line"><span class="string">               COUNT(DISTINCT dt)</span></span><br><span class="line"><span class="string">        FROM ttdw.dwd_tt_log_extend_di</span></span><br><span class="line"><span class="string">        WHERE 1 = 1</span></span><br><span class="line"><span class="string">          AND dt &gt;= &#x27;$&#123;_day&#125;&#x27;</span></span><br><span class="line"><span class="string">          AND dt &lt;= &#x27;$&#123;_day&#125;&#x27;</span></span><br><span class="line"><span class="string">          AND event = &#x27;exposure&#x27;</span></span><br><span class="line"><span class="string">          AND page_id = &#x27;little_note_edit_comment_page&#x27;</span></span><br><span class="line"><span class="string">        GROUP BY user_id</span></span><br><span class="line"><span class="string">    LIMIT 5&quot;&quot;&quot;</span></span><br><span class="line">    str_uid = bq_get_datas.get_datas_to_csv(hql, Engine.PRESTO.value, source_file) <span class="comment"># 获取uid列表</span></span><br><span class="line">    str_uid = <span class="string">&quot;[&quot;</span> + str_uid + <span class="string">&quot;]&quot;</span> <span class="comment"># 进行拼装</span></span><br><span class="line">    connect_production_environment.connect_server(str_uid, file_name, source_file) <span class="comment"># 查跳板机方法</span></span><br></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">out, match_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">match</span> = re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&#x27;&quot;(\d+)&quot;:\&#123;&quot;[\w\d_-]+&quot;:&quot;(-?\d+|[\w\d\s_.,?-]+|[\u4e00-\u9fa5]+|\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;(?:\s\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;)?)\&quot;\&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> re.findall(<span class="keyword">match</span>, out.decode(<span class="string">&quot;utf-8&quot;</span>)):</span><br><span class="line">        match_data.append(re.findall(<span class="keyword">match</span>, out.decode(<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_command</span>(<span class="params">ssh, command, uid_list, label_name, source_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;跳板机主流程&quot;&quot;&quot;</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command, get_pty=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接服务器成功！&quot;</span>)</span><br><span class="line">    match_data = []  <span class="comment"># 获取返回值</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> stdout.channel.recv_ready():</span><br><span class="line">            out = stdout.channel.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="built_in">print</span>(out.decode(<span class="string">&quot;utf-8&quot;</span>), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 确保输出不会与输入冲突</span></span><br><span class="line">            <span class="comment"># 数据处理匹配</span></span><br><span class="line">            get_data(out, match_data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;星卫-堡垒机&quot;</span> <span class="keyword">in</span> out.decode(<span class="string">&quot;utf-8&quot;</span>):  <span class="comment"># 刚进入跳板机界面</span></span><br><span class="line">                stdin.write(<span class="string">&quot;p&quot;</span> + <span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">                stdin.flush()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;hw-bj-dc-job-0001&quot;</span> <span class="keyword">in</span> out.decode(<span class="string">&quot;utf-8&quot;</span>):  <span class="comment"># 选择资产界面</span></span><br><span class="line">                stdin.write(<span class="string">&quot;5&quot;</span> + <span class="string">&#x27;\r\n&#x27;</span>)  <span class="comment"># 选择主机</span></span><br><span class="line">                stdin.flush()</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                stdin.write(<span class="string">&quot;clear&quot;</span> + <span class="string">&#x27;\r\n&#x27;</span>)  <span class="comment"># 因为使用if判断，因此首先进行清屏，避免判断错误</span></span><br><span class="line">                stdin.flush()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Welcome&quot;</span> <span class="keyword">in</span> out.decode(<span class="string">&quot;utf-8&quot;</span>):  <span class="comment"># 进入主机</span></span><br><span class="line">                send_data(stdin, uid_list, label_name)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                stdin.write(<span class="string">&quot;exit&quot;</span> + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">                stdin.flush()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Host&quot;</span> <span class="keyword">and</span> <span class="string">&quot;exit&quot;</span> <span class="keyword">in</span> out.decode(<span class="string">&quot;utf-8&quot;</span>):  <span class="comment"># 退出主机后需要再退出一次</span></span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                stdin.write(<span class="string">&quot;q&quot;</span> + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">                stdin.flush()</span><br><span class="line">                show_data(match_data, source_file)</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">elif</span> stdout.channel.exit_status_ready():  <span class="comment"># 所有输出已经读取完毕</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> stdin.channel.exit_status_ready():  <span class="comment"># 所有输出已经读取完毕后，需要检测输入是否执行完成</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> stdout, stderr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_data</span>(<span class="params">match_test, source_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;展示数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n源表值：&quot;</span> + <span class="built_in">str</span>(pd.read_csv(source_file, header=<span class="literal">None</span>).values.tolist()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接口值：&quot;</span> + <span class="built_in">str</span>(match_test))</span><br><span class="line">    original_data = pd.read_csv(source_file, header=<span class="literal">None</span>).values.tolist()</span><br><span class="line">    <span class="keyword">for</span> key, point <span class="keyword">in</span> <span class="built_in">enumerate</span>(original_data):</span><br><span class="line">        x = point[<span class="number">0</span>]</span><br><span class="line">        y = point[<span class="number">1</span>]</span><br><span class="line">        found_match = <span class="literal">False</span>  <span class="comment"># 初始化为未找到匹配</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(match_test)):</span><br><span class="line">            <span class="keyword">for</span> tup <span class="keyword">in</span> match_test[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">int</span>(x)) <span class="keyword">in</span> tup:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span>(y) != tup[<span class="number">1</span>]:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;\033[1;31m&#x27;</span> + <span class="string">&quot;UID值不匹配请注意！&quot;</span> + <span class="string">&quot;\033[0m&quot;</span></span><br><span class="line">                              + <span class="built_in">str</span>(<span class="built_in">int</span>(x)) + <span class="string">&quot;: &quot;</span> + <span class="built_in">str</span>(y) + <span class="string">&quot; &quot;</span> + tup[<span class="number">1</span>] + <span class="string">&quot;: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(x)))</span><br><span class="line">                    found_match = <span class="literal">True</span>  <span class="comment"># 找到匹配</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_match:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[1;33m&quot;</span> + <span class="string">&quot;未找到该ID，可能是没匹配上，请手动查找：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(x)) + <span class="string">&quot;: &quot;</span> + <span class="built_in">str</span>(y) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">stdin, uid_list, label_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;发送数据&quot;&quot;&quot;</span></span><br><span class="line">    label_name = <span class="string">&#x27;&quot;&#x27;</span> + label_name + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    stdin.write(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">curl --location --request POST &#x27;http://xxx.com.cn:8082/lpm-api/portrait/v1/multipleQuery&#x27; --header &#x27;Content-Type: application/json&#x27; --data &#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;id&quot;:1459928190774,</span></span><br><span class="line"><span class="string">    &quot;sign&quot;:&quot;1afa2ff8c41cc0bccfcc1f2e4ba194e2&quot;,</span></span><br><span class="line"><span class="string">    &quot;data&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;appId&quot;:&quot;ttvoice&quot;,</span></span><br><span class="line"><span class="string">        &quot;entityDomain&quot;:&quot;user&quot;,</span></span><br><span class="line"><span class="string">        &quot;entityIds&quot;:&quot;&quot;&quot;</span> + uid_list + <span class="string">&quot;&quot;&quot;,</span></span><br><span class="line"><span class="string">        &quot;labelNames&quot;:[&quot;&quot;&quot;</span> + label_name + <span class="string">&quot;&quot;&quot;]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;client&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;caller&quot;:&quot;tt-aq&quot;,</span></span><br><span class="line"><span class="string">        &quot;ex&quot;:&quot;tt&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;&quot;&quot;&quot;</span> + <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    stdin.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect_server</span>(<span class="params">uid_list, label_name, source_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;uid_list: 获取的uid列表 \n</span></span><br><span class="line"><span class="string">    label_name: 标签名&quot;&quot;&quot;</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logging.basicConfig(level=logging.ERROR)</span><br><span class="line">        key = paramiko.RSAKey.from_private_key_file(<span class="string">&#x27;C:\\Users\\TT\\Downloads\\id_rsa_2048.pem&#x27;</span>, password=<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 创建 SSHClient 对象</span></span><br><span class="line">        <span class="comment"># client = paramiko.SSHClient()</span></span><br><span class="line">        <span class="comment"># 加载本地 SSH 公钥</span></span><br><span class="line">        client.load_host_keys(<span class="string">&#x27;C:\\Users\\TT\\.ssh\\known_hosts&#x27;</span>)</span><br><span class="line">        <span class="comment"># 连接远程服务器，服务器只支持 rsa-sha 加密，排除其他的，不然会默认选 rsa-sha2-512</span></span><br><span class="line">        client.connect(<span class="string">&#x27;yw-jump.ttyuyin.com&#x27;</span>, port=<span class="number">2222</span>, username=<span class="string">&#x27;yebin&#x27;</span>,</span><br><span class="line">                       timeout=<span class="number">2000</span>, look_for_keys=<span class="literal">True</span>, allow_agent=<span class="literal">False</span>, pkey=key,</span><br><span class="line">                       disabled_algorithms=<span class="built_in">dict</span>(pubkeys=[<span class="string">&quot;rsa-sha2-512&quot;</span>, <span class="string">&quot;rsa-sha2-256&quot;</span>]))</span><br><span class="line">        transport = client.get_transport()</span><br><span class="line">        transport.set_keepalive(<span class="number">30</span>)</span><br><span class="line">        <span class="comment"># 在服务器上执行命令</span></span><br><span class="line">        execute_command(client, <span class="string">&quot;&quot;</span>, uid_list, label_name, source_file)</span><br><span class="line">    <span class="keyword">except</span> paramiko.AuthenticationException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;认证失败:&#x27;</span>, <span class="built_in">str</span>(e))</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;远程服务器已断开&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        client.close()</span><br></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>图略</p><h2 id="提升效率计算"><a href="#提升效率计算" class="headerlink" title="提升效率计算"></a>提升效率计算</h2><p>以 过去 20 天高峰时段密集发送 im 的天数 tt_user_scl_peak_intensive_im_dcnt_20d（Presto 查询，离线标签） 这一个标签为例。使用相同 SQL 如下：<br>使用脚本时间： 用时 52 秒（BQ 显示 SQL 运行时间 24 秒）<br>手工用时：用时 1 分 28 秒（BQ 显示 SQL 运行 18 秒）<br>时间同比减少：（88 - 52）&#x2F; 88 x 100% &#x3D; 40.09%</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="SSH-验证"><a href="#SSH-验证" class="headerlink" title="SSH 验证"></a>SSH 验证</h3><p>现在登录跳板机都需要进行 SSH 验证，但是脚本连接的时候总是提示 SSH 验证失败，但是不知道具体是什么原因，查了很久，一开始觉得是秘钥的问题，觉得是没有拿到正确的秘钥，但是 debug 很久也没有结果。后来借助 GPT 询问是否有打印详细日志的办法，得到了这行代码 <code>logging.basicConfig(level=logging.DEBUG)</code><br>经过日志检查发现，原来是 Paramiko 提供了好几种 SSH 解密方法 包括 rsa-sha2-512， rsa-sha2-256 等，然后默认选择了 rsa-sha2-512 导致解密失败（之前代码未指定解密方式）。但是服务器只支持 rsa-sha 加密，所以需要其他的。于是加上了这行代码 <code>disabled_algorithms=dict(pubkeys=[&quot;rsa-sha2-512&quot;, &quot;rsa-sha2-256&quot;])</code> ，就通过了验证。这行代码作用是设定排除列表。</p><h3 id="看不到返回结果"><a href="#看不到返回结果" class="headerlink" title="看不到返回结果"></a>看不到返回结果</h3><p>过了验证这一关，发现服务器一直在等待中，DEBUG 也只有看到心跳信息在返回，其他的什么都没有。<br><code>stdin, stdout, stderr = ssh.exec_command(command, get_pty=True)</code> 直接打印返回的 stdout 什么都没有。<br>于是重新询问 GPT 寻找思路，原来是没有解码，下面是最后实现的代码样式。成功打印出了我们在跳板机看到的东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> stdout.channel.recv_ready():</span><br><span class="line">    out = stdout.channel.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(out.decode(<span class="string">&quot;utf-8&quot;</span>), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 确保输出不会与输入冲突</span></span><br></pre></td></tr></table></figure><h3 id="无法输入数据"><a href="#无法输入数据" class="headerlink" title="无法输入数据"></a>无法输入数据</h3><p>返回结果看到了，现在可以给跳板机输入数据了，但是没法输入数据，<code>execute_command(client, &quot;p&quot;)</code> 和 <code>stdin.write(&quot;p&quot;)</code> 都没反应，继续问 GPT 和查百度，发现得加个<code>/n</code>，但是加了以后也是没有效果，直到 GPT 偶然蹦了一句“部分服务器需要<code>/r/n</code>才可以”，于是尝试了下，还真的是。于是输入问题顺利解决。</p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>跳板机返回的数据都是以流的形式传回来的，都是一堆数据，怎么找到自己想要的数据呢？我们需要下面的数据特别是 UID 和标签值，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1459928190774</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;329263525&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;327885076&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;195828381&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;202254368&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;197216523&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_scl_user_extend_slip_read_dcnt_1d&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>于是问了下大佬，大佬说用正则就可以，并给出了正则表达式，稍微修改了下大佬的表达式<br><code>&quot;(\d+)&quot;:\&#123;&quot;[\w\d_-]+&quot;:&quot;(\d+)&quot;\&#125;</code>即可实现获取 UID 和 Lable 值。<br>不过这种不支持获取中文、英文以及负数，后面修改了下变成了这样。<br><code>&quot;(\d+)&quot;:\&#123;&quot;[\w\d_-]+&quot;:&quot;(-?\d+|[\w\d\s_.,?-]+|[\u4e00-\u9fa5]+)&quot;\&#125;</code><br>但是这种不支持 date 以及 datetime，后来又改了一次。<br><code>&quot;(\d+)&quot;:\&#123;&quot;[\w\d_-]+&quot;:&quot;(-?\d+|[\w\d\s_.,?-]+|[\u4e00-\u9fa5]+|\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;(?:\s\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;)?)\&quot;\&#125;</code></p><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>非贪婪模式：非贪婪模式（也称非贪心模式）是指在匹配字符串时，优先使用非贪婪匹配，即以最小长度匹配模式。<br>捕获组：在正则表达式中，捕获组是指正则表达式中用括号包围的部分，用于匹配和处理一个或多个子字符串，也称为子组。捕获组可以通过 () 或 (?:) 进行定义，其中 () 表示捕获组，而 (?:) 表示非捕获组。</p><h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><ol><li><p>正则表达式解析出 UID 会少一个<br>（不是必然事件，有部分可以正确识别 5 个 UID）<br>下面是输出示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1459928190774</span><span class="punctuation">,</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;305899035&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_risk_user_abnormal_pro_gift_amt_3d&quot;</span><span class="punctuation">:</span><span class="string">&quot;5000&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;134543&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_risk_user_abnormal_pro_gift_amt_3d&quot;</span><span class="punctuation">:</span><span class="string">&quot;100&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;288022588&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_risk_user_abnormal_pro_gift_amt_3d&quot;</span><span class="punctuation">:</span><span class="string">&quot;100&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;218752910&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_risk_user_abnormal_pro_gift_amt_3d&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;174465858&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;tt_risk_user_abnormal_pro_gift_amt_3d&quot;</span><span class="punctuation">:</span><span class="string">&quot;100&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这是匹配后输出的结果（可以看到第四个被吞了）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span>(&#x27;<span class="number">305899035</span>&#x27;<span class="punctuation">,</span> &#x27;<span class="number">5000</span>&#x27;)<span class="punctuation">,</span> (&#x27;<span class="number">134543</span>&#x27;<span class="punctuation">,</span> &#x27;<span class="number">100</span>&#x27;)<span class="punctuation">,</span> (&#x27;<span class="number">288022588</span>&#x27;<span class="punctuation">,</span> &#x27;<span class="number">100</span>&#x27;)<span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span>(&#x27;<span class="number">174465858</span>&#x27;<span class="punctuation">,</span> &#x27;<span class="number">100</span>&#x27;)<span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><strong>猜测</strong></p><ol><li>可能是这种被截断的没有识别到，但是木有证据</li><li>可能是输出的时候没有及时识别到，使用了 time.sleep()，但是没有效果</li></ol></li><li><p>暂时不支持关系型标签、设备，手机号类型标签<br>这两种标签请求体与普通标签的略有区别，特别是设备标签这种中英文混合的 entity_id 需要使用双引号括起来，使用单引号会报错，代码更改起来较为麻烦。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标签生产回归自动化脚本&quot;&gt;&lt;a href=&quot;#标签生产回归自动化脚本&quot; class=&quot;headerlink&quot; title=&quot;标签生产回归自动化脚本&quot;&gt;&lt;/a&gt;标签生产回归自动化脚本&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;诞生原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标签</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>疲惫与迷茫</title>
    <link href="https://yebingiscn.github.io/2024/01/27/%E7%96%B2%E6%83%AB%E4%B8%8E%E8%BF%B7%E8%8C%AB/"/>
    <id>https://yebingiscn.github.io/2024/01/27/%E7%96%B2%E6%83%AB%E4%B8%8E%E8%BF%B7%E8%8C%AB/</id>
    <published>2024-01-27T15:53:40.000Z</published>
    <updated>2024-01-27T16:10:52.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="疲惫"><a href="#疲惫" class="headerlink" title="疲惫"></a>疲惫</h1><p>今天是周六，这是进来第二周加班周六，也是第一周加周六日<br>很辛苦，这周只有一次6：30回家；今天导师很想留我下来，但是亲戚来了不少，还是说有事走了；9点的时候瞄了眼手机，导师还在线。唉，这个月加了10次到10点以后或者准确说11点以后。<br>最累的是回到家发现家人都睡了，或者是今天进到餐馆发现一桌人都吃完饭了。在江边写字楼看着是很高大上，只是从早到晚很苦逼。</p><h1 id="迷茫"><a href="#迷茫" class="headerlink" title="迷茫"></a>迷茫</h1><p>点点点有什么意义吗，感觉点一年什么都忘记了，听到他们说标签觉得恍如隔世，偶尔用一次SQL查次埋点感觉不得了，偶然间听到导师只会用最基础 <code>select *</code> ，不过导师确实卷业务能力也确实强。还是有很多要学的。<br>希望在职期间能把测试用例写好，然后能在技术上出现一些小贡献。</p><blockquote><p>后记：周六的时候难得回去了老房子，在中心广场看到一个人看着我，可惜戴着帽子<br>我没认出来是谁，我感觉她也没认出来。变故打断了太多。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;疲惫&quot;&gt;&lt;a href=&quot;#疲惫&quot; class=&quot;headerlink&quot; title=&quot;疲惫&quot;&gt;&lt;/a&gt;疲惫&lt;/h1&gt;&lt;p&gt;今天是周六，这是进来第二周加班周六，也是第一周加周六日&lt;br&gt;很辛苦，这周只有一次6：30回家；今天导师很想留我下来，但是亲戚来了不少，还是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何升级butterfly主题</title>
    <link href="https://yebingiscn.github.io/2023/12/07/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7butterfly%E4%B8%BB%E9%A2%98/"/>
    <id>https://yebingiscn.github.io/2023/12/07/%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7butterfly%E4%B8%BB%E9%A2%98/</id>
    <published>2023-12-07T06:28:11.000Z</published>
    <updated>2023-12-07T13:03:14.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提前备份主题的-config-yaml"><a href="#提前备份主题的-config-yaml" class="headerlink" title="提前备份主题的 _config.yaml"></a>提前备份主题的 _config.yaml</h1><blockquote><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。<br>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml)</p><mark class="hl-label orange">注意：不要把主题目录的\_config.yml刪掉</mark> <p>注意： 以后只需要在 _config.butterfly.yml 进行配置就行。<br>如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p></blockquote><p>引用自 Butterfly 官方 <a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><h1 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h1><blockquote><p>参考链接：<a href="https://blog.csdn.net/qq_33154343/article/details/108301374?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170192443016800222891371%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=170192443016800222891371&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-108301374-null-null.142%5Ev96%5Econtrol&utm_term=%E5%8D%87%E7%BA%A7hexo&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_33154343/article/details/108301374?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170192443016800222891371%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170192443016800222891371&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-108301374-null-null.142^v96^control&amp;utm_term=%E5%8D%87%E7%BA%A7hexo&amp;spm=1018.2226.3001.4187</a></p></blockquote><h2 id="使用淘宝源的-cnpm-替换-npm"><a href="#使用淘宝源的-cnpm-替换-npm" class="headerlink" title="使用淘宝源的 cnpm 替换 npm"></a>使用淘宝源的 cnpm 替换 npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g cnpm                 # 升级 npm</span><br><span class="line">cnpm cache clean -f                 # 清除 npm 缓存 (这步似乎执行不了)</span><br></pre></td></tr></table></figure><mark class="hl-label green">更新hexo:进入blog目录，执行如下命令</mark> <h2 id="更新-package-json-中的-hexo-及插件版本"><a href="#更新-package-json-中的-hexo-及插件版本" class="headerlink" title="更新 package.json 中的 hexo 及插件版本"></a>更新 package.json 中的 hexo 及插件版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g npm-check           # 检查之前安装的插件，都有哪些是可以升级的</span><br><span class="line">cnpm install -g npm-upgrade         # 升级系统中的插件</span><br><span class="line">npm-check</span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure><h2 id="更新-hexo-及所有插件"><a href="#更新-hexo-及所有插件" class="headerlink" title="更新 hexo 及所有插件"></a>更新 hexo 及所有插件</h2><p><code>cnpm update</code></p><h2 id="确认-hexo-已经更新"><a href="#确认-hexo-已经更新" class="headerlink" title="确认 hexo 已经更新"></a>确认 hexo 已经更新</h2><p><code>hexo -v</code></p><h1 id="升级-butterfly"><a href="#升级-butterfly" class="headerlink" title="升级 butterfly"></a>升级 butterfly</h1><h2 id="进入-butterfly-目录"><a href="#进入-butterfly-目录" class="headerlink" title="进入 butterfly 目录"></a>进入 butterfly 目录</h2><ol><li>首先，更新工作的状态树：<br><code>git add .</code></li><li>输入如下命令，将文件放在堆栈中，获取更新后，再弹栈：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h1 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h1><ol><li><div class="note danger disabled"><p>提示 <code>Error: Cannot find module &#39;hexo-util&#39;</code></p></div><mark class="hl-label default">原因</mark> 缺少插件<br><mark class="hl-label green">解决</mark> 输入`npm install hexo-util --save`</li><li><div class="note danger disabled"><p>Git 部署时报错</p></div><mark class="hl-label default">原因</mark> config.yaml 需要合并以前的内容和新的内容<br><mark class="hl-label green">解决</mark> 打开 vs code 合并相关内容 <mark class="hl-label orange">注意不能有重复的</mark> </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提前备份主题的-config-yaml&quot;&gt;&lt;a href=&quot;#提前备份主题的-config-yaml&quot; class=&quot;headerlink&quot; title=&quot;提前备份主题的 _config.yaml&quot;&gt;&lt;/a&gt;提前备份主题的 _config.yaml&lt;/h1&gt;&lt;bl</summary>
      
    
    
    
    
    <category term="butterfly" scheme="https://yebingiscn.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>时间之外的往事</title>
    <link href="https://yebingiscn.github.io/2023/09/12/%E6%97%B6%E9%97%B4%E4%B9%8B%E5%A4%96%E7%9A%84%E5%BE%80%E4%BA%8B/"/>
    <id>https://yebingiscn.github.io/2023/09/12/%E6%97%B6%E9%97%B4%E4%B9%8B%E5%A4%96%E7%9A%84%E5%BE%80%E4%BA%8B/</id>
    <published>2023-09-12T15:12:17.000Z</published>
    <updated>2023-11-15T03:53:58.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间之外的往事"><a href="#时间之外的往事" class="headerlink" title="时间之外的往事"></a>时间之外的往事</h1><blockquote><p>这篇文章不是刘慈欣的小说，但是我很喜欢这个标题，回顾自己的人生，没有什么能比这个标题更好的形容浮云般的往事了，也许是太自作多情，也许是太看不懂，也许也许，请允许我在这里添油加醋的书写属于我自己的往事吧。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时间之外的往事&quot;&gt;&lt;a href=&quot;#时间之外的往事&quot; class=&quot;headerlink&quot; title=&quot;时间之外的往事&quot;&gt;&lt;/a&gt;时间之外的往事&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章不是刘慈欣的小说，但是我很喜欢这个标题，回顾自己的人生，没有什么能</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>重大变故后该走向何方</title>
    <link href="https://yebingiscn.github.io/2023/09/12/%E9%87%8D%E5%A4%A7%E5%8F%98%E6%95%85%E5%90%8E%E8%AF%A5%E8%B5%B0%E5%90%91%E4%BD%95%E6%96%B9/"/>
    <id>https://yebingiscn.github.io/2023/09/12/%E9%87%8D%E5%A4%A7%E5%8F%98%E6%95%85%E5%90%8E%E8%AF%A5%E8%B5%B0%E5%90%91%E4%BD%95%E6%96%B9/</id>
    <published>2023-09-12T14:46:08.000Z</published>
    <updated>2023-12-22T15:23:42.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li>之前和算法他们交流，算法说 7 月的时候就已经被通气说要小心一点，但是我这边却没有任何消息。看同组其他人他们的反应觉得似乎也是很突然？之前还和我说测试组不动人</li><li>现在来看，也许当时标签换人就是一个坑，可惜当初只是沉浸在了即将变成 A 角的紧张感中，不能说当时已经决定至少可能也有这方面的准备了</li><li>整件事不管真相如何，落实到个人层面上有一种很强的无力感，你明知是一个大坑却只能眼睁睁看着发生。这确实是件相当难受的事情。整件事就是灰犀牛+黑天鹅的叠加</li><li>当初以为进趣丸是历史的选择，结果只是一个小插曲，最后历史还是按照巨大的惯性走向了该去的方向。那么下一步是？<strong>我不觉得我现在准备考研能考上研究生</strong><blockquote><p>ps: 不会是归因评审会的时候我看了下手机被发现了吧<br><strong>最大的可能还是 hc 超发了,多招了人，要裁可不就裁应届了吗，负责项目又少又可以顶上</strong></p></blockquote></li></ol><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><blockquote><p>我不觉得做完这些能改变最后的结局，但是也能对以后有所启示吧</p></blockquote><ol><li>缺少了与 Leader 的通气；一起吃饭的两个校招生都很会向上管理</li><li>应该积极参与组内事务，比如当初的排布 AB 角</li><li>应该接手风控的 B 角，当初还是希望能和导师共同测试一个项目，画像的项目组也比较和我胃口</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>这个无论对谁来说都不是一件轻松的事情，但是既然发生也只能接受</li><li>趣丸的经历清晰的告诉这一个事实，那就是数据测试工程师的工作可以完全适应，但也潜藏了些危机</li><li>测试用例编写需要进一步加强</li><li>经验实在是太少太少</li></ol><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>面试人人租果然没过(还损失了一下午工资+个人信息)，二（终）面没过 <br>以现在的眼光来看感觉是提前看了信息导致以及当时还没从趣丸环境脱离出来影响了，当然自身的能力也很重要<br>当初还鄙视人人租，现在连外包都去不了了，可能要面临一个相当长的空窗期 <br>未来应该怎么走呢？</p><h1 id="社招面试经历"><a href="#社招面试经历" class="headerlink" title="社招面试经历"></a>社招面试经历</h1><h2 id="人人租（研趣）"><a href="#人人租（研趣）" class="headerlink" title="人人租（研趣）"></a>人人租（研趣）</h2><p>就跟趣研反过来也是挺离谱的哈<br>笔试的时候恍惚间好像看到了某个人</p><blockquote><p>虽然公司被吐槽，但是面试没过也值得深思，可能还是经验和能力还是不太行<br>看到面试官用例和 SQL 都给打了半勾，说明还需要加强<br>面试的时候能够明显感觉到自己明显对标签更在行，对 WEB 还有性能什么的不太在行，这方面可以针对提升下</p></blockquote><ol><li>子查询和关联查询哪个性能高为什么 <br>因为在关联查询中，数据库系统可以利用索引等优化技术，根据关联条件快速定位需要查询的数据行，然后将结果合并返回，效率比较高。<br>而在子查询中，每次子查询都会执行一次完整的查询操作，相对于关联查询会产生更多的 I&#x2F;O 操作和 CPU 负担，而且不能充分利用索引优化等技术，因此性能相对较低。</li><li>如何定位前后端 bug<blockquote><p>首先要判定 bug 位置<br>主要看返回的消息体以及请求的状态码</p></blockquote><ol><li>返回的消息体正常，即为前端 bug</li><li>返回消息体异常，检查请求方法，请求方法正常即为后端 bug 否则为前端 bug</li><li>状态码也可以判断，如果非 200 基本为后端异常</li><li>看是否是界面的问题，例如 UI，可见与不可见等常见的由前端控制的界面</li><li>如果能查到数据库，可以检查数据库，一般即为后端逻辑问题</li><li>看需求文档</li></ol></li><li>有没有做过 SQL 优化<blockquote><p>当时有点傻了，直接说这个不是测试的工作，其实有些小细节也完全可以说</p></blockquote><ol><li>避免使用 SELECT *</li><li>优化 JOIN 语句</li><li>特殊值过滤，减少无用数据</li><li>谓词下推，例如先对数据进行筛选，之后进行 join 和 group by 操作</li><li>联合条件准确，避免笛卡尔积</li></ol></li></ol><h2 id="知否科技"><a href="#知否科技" class="headerlink" title="知否科技"></a>知否科技</h2><blockquote><p>成立 3 年的小公司，员工不多<br>面试准备不好，笔试有些没答上来，面试也一般般，当时活动测试其实就是 H5 测试，面完后才想起来<br>UI 自动化当时有这个想法，但是还没来得及实现就 gg 了</p></blockquote><ol><li>隐式等待和显示等待的区别：<ol><li>隐式等待是全局的，可以随时更改的，显示等待是针对单一元素或者一组元素的</li><li>隐式等待只能针对元素查找方法，显示等待可以自定义等待条件</li><li>强制等待：就是 sleep() ，也叫硬等待；</li></ol><ul><li>缺点：如果等待时间过长，即使元素已被加载出来了，但还是要继续等，这样会导致整个脚本的执行上会浪费很多时间</li></ul><ol start="3"><li>显式等待：设置一个超时时间和一个元素查找条件，在这个时间内，不断寻找元素，超时找不到就会报错</li></ol><ul><li>不需要页面全部加载完成，相对节省时间</li><li>代码量多</li></ul><ol start="4"><li>隐式等待：设置一个超时时间，在这个时间内，不断的寻找元素，超时找不到就抛出异常</li></ol><ul><li>一次声明，终生有效–对其后执行的每一行元素定位都有效</li><li>所以，通常在创建 driver 之后就去申明</li><li>隐式等待，需页面全部加载完成再执行，相对浪费时间</li></ul></li><li>如何选用等待方式<ul><li>申明一个隐式等待，全局通用</li><li>对于一些加载特别缓慢的元素，设置显示等待，适当为其增加等待时间</li><li>当显示等待与隐式等待同时出现的时候，取时间更多的一个生效</li></ul></li></ol><h2 id="九四智能"><a href="#九四智能" class="headerlink" title="九四智能"></a>九四智能</h2><blockquote><p>看起来是中型公司，不过开发似乎也不多<br>面试答得不好，面试官表示没听懂我的项目，特别是标签以及风控平台<br><strong>她表示表述不清楚挺丢分的</strong></p></blockquote><ol><li>感觉可以记一下 boss 上的标签简介，简介+自己做的工作</li><li>自动化这块得好好想想怎么答，特别是针对哪个方面做的自动化</li></ol><h2 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h2><p>感觉很多公司用不上趣丸那些屠龙记，但是又没办法表述清楚+展现自己的能力，还是挺尴尬的，想办法做些改进吧。<br>记得如果有反问环节问下建议。好几个面试里都不记得了</p><h2 id="理想定制"><a href="#理想定制" class="headerlink" title="理想定制"></a>理想定制</h2><blockquote><p>不是我投的，有人帮了倒忙，但还是我们太差劲了</p></blockquote><ol><li>点击就送，但是任务很多很杂，什么都没有，才给 4K（假如真去做了，再拿到 8K 和 8% 公积金不知道得何年何月了）</li></ol><h2 id="阶段总结-1"><a href="#阶段总结-1" class="headerlink" title="阶段总结"></a>阶段总结</h2><p>像是种补偿或者更像是种嘲讽，把人打到半死的时候给桶水打醒休息下准备继续打<br>伴伴 + 趣丸经历感觉给我穿上了长衫，假如当初一直没有稳定工作，是不是理想定制给 4K 也会干呢？<br>如果去做了 IT 支持，运维什么的，再被裁员应该去哪呢<br>现在招聘网站都经常不想点开，不想投简历了。</p><h2 id="智会云"><a href="#智会云" class="headerlink" title="智会云"></a>智会云</h2><blockquote><p>面的感觉还行，不知为何没有通过，现在想想他应该就是想招个实习生</p></blockquote><ol><li>安全测试有哪些</li><li>有通过 Linux 部署测试环境吗</li><li>接口测试是怎么测的（接口自动化别说用新质量平台吧，说成自己编码的也好）</li><li>能通过项目来预估时间吗</li><li>Docker 有用过吗</li><li>反问的时候问了下有什么建议吗，他说没有。。。。。。</li><li>询问薪资的时候我说 5k，他说是最高薪资吗。。。。。。</li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>Python 得刷下题，碰到的时候有点慌</li><li>面试的时候对项目描述还是有些紧张</li><li>对于一些了解却没做过的得好好想下怎么答</li></ol><h2 id="广东颐点软件科技"><a href="#广东颐点软件科技" class="headerlink" title="广东颐点软件科技"></a>广东颐点软件科技</h2><blockquote><p>面试官直言行业不符合，而且这个听起来像是短期项目（项目结束后就走人那种）</p></blockquote><ol><li>性能测试怎么做，多大（把 QPS 忘了）</li><li>接口测试怎么做</li><li>测试用例包含哪些内容</li></ol><h2 id="广东保伦电子"><a href="#广东保伦电子" class="headerlink" title="广东保伦电子"></a>广东保伦电子</h2><blockquote><p>面试官挺好的，有重视你简历的感觉，开出的薪资也还可以，但是被加班和没人带吓到了，没有当场答应拿到 offer<br>回来想想感觉吃亏了<br>可能还是没有脱下长衫，没办法之前的工作太好了</p></blockquote><ol><li>听起来需要做 a 测+部门内部测试（硬件+软件测试）</li><li>很忙还有加班文化（面试官着重强调能否适应加班，“要奋斗不要偷懒的”），895.5。其他的条件也不太行，总的来说算是钱一般事多离家远<br>以趣丸的经历来说感觉 985 还可以接受，日常加班到 10 点就有点不太行了。不过现实中哪有这么好的工作呢</li></ol><h2 id="阶段总结-2"><a href="#阶段总结-2" class="headerlink" title="阶段总结"></a>阶段总结</h2><p>保伦电子在内耗两天之后还是向面试官表达了想去的意愿，但面试官再也没回过信息了。于是也只能继续投简历</p><h2 id="广州同玩科技"><a href="#广州同玩科技" class="headerlink" title="广州同玩科技"></a>广州同玩科技</h2><blockquote><p>是一家不到一百人的互联网小公司，福利看着挺好的，面试的时候才发现是要去做 APP 测试，不知道为什么，他们还是招了我进去</p><blockquote><p>当时觉得自己应该就这家了，但不太确定，果然刚进入金碧门口就收到了录用通知</p></blockquote></blockquote><ol><li>一面技术官看到我没做什么 APP 测试经历没问什么问题</li><li>覆盖安装，主要是功能测试</li><li>记不太清楚了，答得不太好，但是经历了后面的面试</li><li>面试官和我说我不要求你 996，但是你一定要有 996 的能力</li><li>面试等待的时候发现隔壁在面试，听了下，一周得发两次版</li><li>技术官和我说我认识数据部的产品华安阳，但我不记得谁信华，后来想了想可能是数据部产品的老大。他说会去核实下趣丸的工作</li><li>老板说我的经历挺坎坷的</li></ol><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>12 月 13 日，我收到了 offer，距离 9 月 5 日我放下工作过去了 99 天<br>12 月 18 日，我来到公司报道，距离 9 月 22 日我离开趣丸过去了 87 天<br>公司福利一般，加班也很猛，最低基数，公司 APP 要么是骗看广告的的要么是自研但一直亏损<br>但好歹是我去面试以来最好的一家<br>但好歹有双休<br>好歹离家近，工资也还行，导师也很好<br>父母一直催促我们去端盘子，也确实是让他们失望了<br>在这个日子里，你没法要求更多，只能加油吧</p><blockquote><p>在绝境中没人能拯救你，哪怕是你父母，他们也只希望你尽快解决不管用什么方式<br>但<strong>人是自己命运的主人</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;复盘&quot;&gt;&lt;a href=&quot;#复盘&quot; class=&quot;headerlink&quot; title=&quot;复盘&quot;&gt;&lt;/a&gt;复盘&lt;/h1&gt;&lt;h2 id=&quot;历史&quot;&gt;&lt;a href=&quot;#历史&quot; class=&quot;headerlink&quot; title=&quot;历史&quot;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;ol&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实训记录</title>
    <link href="https://yebingiscn.github.io/2022/11/06/%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95/"/>
    <id>https://yebingiscn.github.io/2022/11/06/%E5%AE%9E%E8%AE%AD%E8%AE%B0%E5%BD%95/</id>
    <published>2022-11-06T08:20:33.000Z</published>
    <updated>2023-03-01T12:57:36.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实训"><a href="#实训" class="headerlink" title="实训"></a>实训</h2><pre><code>大学四年的唯一一次实训，连上了10天，期间还请了不少假，趣丸面试3次，建行笔试1次。收获也是有的，可惜最后是这样结束。没有做出一个出色的项目也没拿到优秀。周五晚在图书馆这样写到“正如这个秋天很多事一样，最终都不尽如人意。”</code></pre><ol><li>原来是讲微信小程序的，在我的据理力争之下（我觉得），改成了VUE。事实上，这样改了确实帮我们能构建一个简单的VUE程序，不会说完全看不懂了。可惜没有用上element-ui，也没机会用上Ajax，现在想来还是too young too simple，一个路由传参花了很多时间，电脑卡死也很坏心情（刚好是趣丸发offer的那一晚）。</li><li>实话实说，最后几天我没有听懂，也许做花点时间也能做出来，但我确实没有听懂，Java也是这样，学到后面听了个课，听了之后却好像没有听一样。</li><li>培训班骗人说实在没什么意思，不过跟我相处的时候倒挺好，我说我去测试&#x2F;测开，“为什么不走开发？”，也没有劝我或宣传报培训班，只是说“如果你想走开发可以考虑走我们的火箭班”，但到了这个时候，我也不想走开发了。</li><li>虽然时间很紧张，但是很多人的都是“抄的”，实在是让人感叹，“这样的环境如何能长出参天大树？”，我们做的这样糟糕，也有这样的因素在，中途有个组员说：“我干脆摆烂算了”，听得我又气又无奈，可惜自己一个人也没办法做完更没办法做好所有的事。</li><li>实训占用了很多时间，六级、体测都搁置了，感觉这时间其实挤一挤还是有的，就看自己有没有这个决心了。</li><li>听说海大一半的人都拿了offer，看来菜的只是我们，一步错步步错，眼下只能加固自己的知识储备，继续投简历了。</li><li>在观察者网看过一篇文章《平庸的人生，要想做成一点事很难的》，颇有感受，我想尤其是逆境时更是如此。<br> “我想说的是平凡平庸的人生想做成一点事是很难的，我们认定一件事就要狠心做下去，全力以赴就算没成功也无怨无悔。如果侥幸成功了那么这段人生经历就是我们人生中宝贵的精神财富，是单单金钱买不到的。”</li><li>这个秋天跟我妈打了很多电话，还是得自己加油。</li></ol><h2 id="Ajax的使用"><a href="#Ajax的使用" class="headerlink" title="Ajax的使用"></a>Ajax的使用</h2><ol><li>首先得导入AJAX,<code>npm install axios</code></li><li>接着可以这么使用，注意：图示的代码会报跨域问题（可能需要使用JSON解决）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.xiao-xin.top/API/yiqing.php&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;湛江&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sentence</span> = response.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实训&quot;&gt;&lt;a href=&quot;#实训&quot; class=&quot;headerlink&quot; title=&quot;实训&quot;&gt;&lt;/a&gt;实训&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;大学四年的唯一一次实训，连上了10天，期间还请了不少假，趣丸面试3次，建行笔试1次。
收获也是有的，可惜最后是这样结束。
没</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>笔试面试经验总结</title>
    <link href="https://yebingiscn.github.io/2022/09/05/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://yebingiscn.github.io/2022/09/05/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-05T13:23:19.000Z</published>
    <updated>2023-11-13T13:04:58.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同花顺笔试"><a href="#同花顺笔试" class="headerlink" title="同花顺笔试"></a>同花顺笔试</h2><blockquote><p>今天周一，基本满课，抽出时间做了同花顺的笔试，感谢同花顺，可以让我见见世面。<br>做笔试的时候其实没想得这么多（第一题就看不懂了）时间也不太够，40 道题 5 道编程题包括 2 道算法，做完感觉还行，但是我只做出了一半，其实不应该<br>刷了算法，刚好考到一题我会的，结果牛客网上不用输入。。。<br>好多 C 的知识，我也不会，什么宏定义，那都是 C&#x2F;C++的知识，Linux 的知识反而比较少。<br>还有个值得吐槽的是，同花顺的代码只能写，不能试也没有提示，UpperCase()只记得大概了</p></blockquote><h2 id="4399-笔试"><a href="#4399-笔试" class="headerlink" title="4399 笔试"></a>4399 笔试</h2><blockquote><p>主要是算法炸了心态，三道字符串的题目，应该很简单的，结果都忘了</p></blockquote><ol><li>替换字符 ，解法是遍历，StringBuilder 判断接收</li><li>查找字符串中的数字，解法是遍历+Hash?</li><li>增加字符串中的指定字符,多重 for 循环应该能搞定</li></ol><h2 id="信锐技术笔试"><a href="#信锐技术笔试" class="headerlink" title="信锐技术笔试"></a>信锐技术笔试</h2><ol><li>跳台阶+字符串(后者会，但是只通过了 80%，前者只通过了 40%，百思不得其解)</li><li>强关联（没找到相关资料）</li><li>后序遍历（这个也基本考了）<br>在二叉树中，先左后右再根，即首先遍历左子树，然后遍历右子树，最后访问根结点。</li><li>出栈序列判断栈长度（这个基本都考了）</li><li>几个节点二叉树<br>f(n) &#x3D; f(n-1) + f(n-2)f(1) + f(n-3)f(2) + … + f(1)f(n-2) + f(n-1)</li><li>网段判断（常考）<br>A 类，网络号为前 8 位， 后 24 位为主机号<br>B 类，网络号为前 16 位，后 16 位为主机号<br>C 类，网络号为前 24 位，后 8 位为主机号</li><li>交换机工作原理，VLAN 划分和网段划分搞错了，网段划分是路由器做的</li></ol><h2 id="鼎桥笔试"><a href="#鼎桥笔试" class="headerlink" title="鼎桥笔试"></a>鼎桥笔试</h2><blockquote><p>全是选择题，主要是测试、Linux、SQL 和通信相关的知识</p></blockquote><ol><li>Linux 运行状态<br>运行，中断，不可中断，僵尸，停止状态</li><li>IP 网络通信类型<br>单播，组播，广播</li><li>Linux 后台启动进程结尾＋&amp;</li><li>strcat 拼接，strcmp 比较</li><li>more 用于一次显示一页</li><li>ln 的功能是为某一个文件在另外一个位置建立一个同步的链接</li><li>chown 可以将文件的拥有者加以改变 chmod 改变文件的读写许可设置<br>若要 rwx 属性则 4+2+1&#x3D;7；<br>若要 rw-属性则 4+2&#x3D;6；<br>若要 r-x 属性则 4+1&#x3D;5。</li></ol><h2 id="阶段性总结"><a href="#阶段性总结" class="headerlink" title="阶段性总结"></a>阶段性总结</h2><p>总的来说算法都是比较简单的，如果刷熟剑指 offer 的简单题中等题肯定是可以了。测试题也比较简单，但是吧。。。</p><h2 id="信锐一面总结"><a href="#信锐一面总结" class="headerlink" title="信锐一面总结"></a>信锐一面总结</h2><blockquote><p>9 月 15 日<br>时长 15：38 - 16：00，时长较短，感觉有点像 KPI 面。通知三天内出结果，应该挂了</p></blockquote><ol><li>自我介绍</li><li>回顾笔试算法：跳台阶（动态规划） + 字符串数量 &gt; 3 删掉（哈希）</li><li>介绍项目：老人跌倒检测平台，建议：可以加上 AI 电话（这个说真的技术难度比较大）</li><li>场景测试</li><li>TCP 和 UDP 的区别，动态路由协议：RIP 和 OSPF</li><li>Linux 常用命令，读写怎么改</li><li>提单（不应该说没有用过，应该说看视频操作过；还有这个内容也说少了）</li><li>低复现高危害 bug 怎么搞</li><li>bug 生命周期（这个忘记了，结果正好问道）<ol><li>发现 bug</li><li>提交 bug</li><li>指派 bug</li><li>确认缺陷</li><li>修复 BUG</li><li>回归验证 BUG</li><li>关闭缺陷</li></ol></li><li>学校相关：与同龄人差距主要是在哪里</li><li>为秋招准备了哪些工作</li><li>反问：面试流程</li><li>建议：了解敏捷测试</li></ol><h2 id="信锐二面总结"><a href="#信锐二面总结" class="headerlink" title="信锐二面总结"></a>信锐二面总结</h2><blockquote><p>9 月 16 日<br>时长 10：40 - 11：06，时长较短，面试官讲话有些不太清楚，应该是部门面，无技术问题。感觉说的不太符合面试官意思，应该挂了</p></blockquote><ol><li>自我介绍</li><li>介绍项目，用了哪些测试方法</li><li>自动化测试有什么缺点（封装 + 手工测试）</li><li>你们怎么确保项目文档里写的功能都有实现，用什么方法<br>（这里扯了很长时间，我也不知道用什么方法，最后只能说像测试一样搞个预期结果，实际结果；回来问了下群友，他们说可以用单元测试）</li><li>你为什么觉得你适合做测试这个岗位，从多个维度来说<br>（这里最后一个对学校友好不应该说，应该说有师姐引路比较好，讲到这里的时候他抬头看了下屏幕，应该是看看我是什么学校的）<br>我说我参加了鸿蒙的内测算个极客喜欢找 bug，他说测试工程师这个岗位跟极客什么的还是差距很大的，他以前也喜欢搞安卓手机什么的。。。<br>（这里就在劝退了，但是差距确实比较大，毕竟是点点点嘛。）<br>建议回答：<ol><li>这几年的项目实践下来，还有老师对我的评价，让我希望去做技术，而在技术岗里我比较喜欢测试</li><li>我平时有参加过各种内测活动，像鸿蒙的内测、Windows 的内测、应用的内测，也提过不少 bug</li><li>应聘之前也看了 Tester home 论坛，感觉这个岗位的未来还是很光明的</li><li>也有师兄师姐在做这个领域，我跟他们交流测试觉得还是不错，也拿到了很多资料，相比其他岗位我的准备更充分</li></ol></li><li>反问：部门的自动化测试与功能测试占比<br>答：自动化不超过 40%</li><li>反问：新人的成长（刚入职）<br>答：培训两周然后选导师就跟项目了</li></ol><h2 id="阶段反思与总结-1"><a href="#阶段反思与总结-1" class="headerlink" title="阶段反思与总结 1"></a>阶段反思与总结 1</h2><blockquote><p>距离收到第一封信锐的面试邀约已经一个星期了，不用想肯定是挂掉了，不用再去看了，信锐的面试也有很多值得总结的地方。</p></blockquote><ol><li>在对于测试的细节操作过于泛泛，对于知识掌握也不够深入，还好两面都没考难的问题，小公司尤其可能考测试操作</li><li>笔试过的太过简单？接下来的笔试很可能要连续吃瘪，要尤其注意复习（特别是建设银行）</li><li>许多问题想到就答了，没有一套体系（“你为什么觉得你适合做测试这个岗位，从多个维度来说”就没有讲好，给抓住机会劝退了）</li><li>提前的复习面向面经是可以的，但是也不能完全依赖面经。而且面经的内容也没有记住<br>周一的时候我们收到了拉钩的翼课网面试邀约，可惜不能去提前实习，就挂了。</li></ol><h2 id="百田面试一面"><a href="#百田面试一面" class="headerlink" title="百田面试一面"></a>百田面试一面</h2><blockquote><p>10 月 21 日<br>时长 16：00 - 16：21<br>面试得太差了，好几个问题没有答出来，基本都碰到了盲点，太紧张以至于话都说不清楚。</p></blockquote><ol><li>自我介绍</li><li>玩过的游戏</li><li>项目部署</li><li>数据库增加列</li><li>种田的测试（没有考虑给的点的完善性；答得也太糟糕了，没有分点答出来;以后碰到提出是否可以做个记录）</li><li>HTTP 协议，Resutful 协议</li><li>Linux 基本命令</li><li>反问：面试官有什么建议能给我的嘛<br>建议要先了解需求，再组织好语言。可以将面试官可能问到的问题列一个大纲，先行准备。</li></ol><h2 id="阶段反思与总结-2"><a href="#阶段反思与总结-2" class="headerlink" title="阶段反思与总结 2"></a>阶段反思与总结 2</h2><pre><code>距离收到信锐的感谢信都已经一个月了，第二场面试居然如此拉跨真是没有想到</code></pre><ol><li>话都说不清楚，感觉今天也没什么不同啊；紧张的基本面试官讲的都记不住</li><li>对于面试准备仍然不够，特别是设计用例方面的，写也许可以写个大概，但是讲也过于糟糕了。</li><li>计算机网络应用层的协议还是不太行</li></ol><h2 id="趣丸科技一面"><a href="#趣丸科技一面" class="headerlink" title="趣丸科技一面"></a>趣丸科技一面</h2><blockquote><p>10 月 27 日的时候搞错了，还加了 HR 的微信。刚好等的时候收到华资的感谢信。然后上午的时候又有一家公司告诉我，“你是秋招的是吧，你不适合我们公司”<br>10 月 28 日<br>时长 15：00 - 16：08<br>有史以来时长最长的面试了，面试官基本把我简历写的每一个点都问了一遍，给了很多建议<br>很多都没复习到，只能根据印象去答。太多了不太记得了，挑些重点而且还记得的写下吧<br>面试官没开摄像头，说摄像头坏了</p></blockquote><ol><li>SQL 优化:怎么写 SQL 性能比较快等等</li><li>索引:有哪些索引；索引优点和缺点；什么情况要建立索引</li><li>SQL 题：分页查询（答错了）limit(第几行开始，查多少行)</li><li>测试：白盒测试有哪些；覆盖率最高是哪个（答了个条件组合覆盖，后面看了下是逻辑覆盖）</li><li>场景题：测试微信头像</li><li>计算机网络：HTTP 协议和 TCP 的区别</li><li>Linux：常用命令</li><li>Linux 场景题： Linux 过滤关键字写入另一个文件（答错了） cat 文件名 |grep ‘’ &gt; 文件名</li><li>职业规划</li><li>怎么学习的测试，从哪里学的</li><li>如果领导给你任务，你发现知识储备不够或者时间不够怎么办<br>面试官说刚刚面试了一个科班的，但是测试基础不行<br>面试官表示互联网行业都会时间不够，不单单是测试行业的问题，主要是追热点导致的</li><li>Java（面试官表示好久没用了，想了几个以前的问题）：抽象类和实体类的区别；数组怎么转 ArrayList（答错了，可以使用）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法一</span><br><span class="line">Integer [] myArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">ArrayList&lt;Integer&gt; myList= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(myArray)); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">arrayList.add(<span class="number">4</span>); <span class="comment">// [1, 2, 3 ,4]</span></span><br><span class="line">myList.remove(<span class="number">1</span>);<span class="comment">// [2, 3 ,4]myList.clear();// []</span></span><br><span class="line"></span><br><span class="line">方法二使用 Java8 的Stream(推荐)</span><br><span class="line">List&lt;Integer&gt; collect = Arrays.stream(myArray).collect(Collectors.toList()); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">collect .getClass()  <span class="comment">// java.util.ArrayList</span></span><br></pre></td></tr></table></figure><ol start="13"><li>Python（答得完全不对，不过我说我只学了基础）：Python 的基础类型（数字，字符串，列表，元组，set，字典）；字典里的 key 哪些类型可以做（不可变类型，笔试的选择题答反了）</li><li>接口测试：登录接口怎么测试</li><li>Selenium 定位的元素的方法（只说出了 3 种，一共有 8 种）<br>id<br>name<br>className<br>tagName<br>linkText<br>partialLinkText<br>xpath<br>cssSelector</li><li>UI 自动化优缺点</li><li>测试的流程</li><li>好像还有重现 bug 步骤和 bug 严重性（不太记得了）</li><li>redis 和 MySQL 的不同</li><li>建议<ol><li>基础中上，但是 Python 基础差</li><li>系统去学知识，尤其是要充实基础，不要花拳绣腿，公司第一个就裁测试开发（其实趣丸有专门招测试开发的岗位）</li><li>学习黑盒、计网、SQL（特别强调要加强）、Linux、编程语言特别是 Python（基础差，面试官强调了他只是问了 Python 基础，公司也要用 Python）</li><li>保持学习</li><li>进到公司新人要做个模拟项目，要做到最好；进到组里，要尽快熟悉项目情况</li><li>书籍比较落后了</li></ol></li></ol><h2 id="趣丸科技二面"><a href="#趣丸科技二面" class="headerlink" title="趣丸科技二面"></a>趣丸科技二面</h2><blockquote><p>10 月 29 日<br>时长 14：00 - 14：32<br>大数据主管面试，面试的岗位属于大数据部门<br>差不多也是从头到尾大概问了一回</p></blockquote><ol><li>介绍自己的身份</li><li>自我介绍</li><li>实习（不要求测试相关的）</li><li>项目</li><li>全连接和左连接区别（刚好没看全连接）</li><li>提了嘴索引，什么情况下不适用，以及组合索引</li><li>Linux 你主要用来干什么，基本命令，讲了一堆难的命令 ack，我只说了解 vi</li><li>长连接和短连接的区别</li><li>为什么要用 redis（面试官补充说 redis 很耗内存，想了下他的职业好像很有道理）</li><li>有学其他的语言吗，吸取了上回的教训，讲的收敛了些</li><li>测试前沿技术，要是答了测试左移会好很多，可惜讲了敏捷测试（又回想起了信锐的一面面试官）</li><li>其余东西（问了下学校在哪）</li><li>建议<ol><li>紧张</li><li>主流技术</li><li>考虑周全，精益求精，不要就只是应付</li><li>应届生头两三年成长非常快</li></ol></li><li>介绍公司的主流技术<br>Go, Java, Python, hadpop 等等</li><li>大数据测试和普通测试有什么区别<ol><li>平台数据处理</li><li>性能问题</li><li>熟 SQL</li><li>白盒代码走查，要截成各种表，收集日志</li></ol></li></ol><h2 id="阶段反思与总结-3"><a href="#阶段反思与总结-3" class="headerlink" title="阶段反思与总结 3"></a>阶段反思与总结 3</h2><pre><code>没有百田这么紧张了，回想9月的想法，也许是阴差阳错，最想去的2家都给了面试，信锐也完成了试水的任务。虽然到现在还是0offer。但却是学到了很多好像那家广州影子科技也打电话给我了，不知道是不是，给我打电话的我都没听清公司。。。继续加油吧。还是很多值得学习的，像趣丸的面试官也给了我们很多建议，很多都很中肯，可以指导我们接下来几个月的学习。</code></pre><h2 id="建设银行（翁源支行信息技术岗）笔试"><a href="#建设银行（翁源支行信息技术岗）笔试" class="headerlink" title="建设银行（翁源支行信息技术岗）笔试"></a>建设银行（翁源支行信息技术岗）笔试</h2><blockquote><p>在工商银行和建设银行笔试之间选择了建设银行，一方面是平衡实训和考试，另一方面也是没有准备因此减小竞争和平衡心态。<br>10 月 30 日 14：00 - 17：30</p></blockquote><h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><ol><li>计算机题（计算机原理，数据结构，计算机网络，C++）</li><li>行测</li><li>三篇英语阅读（好几篇讲的都是金融危机）</li></ol><h2 id="建设银行一面"><a href="#建设银行一面" class="headerlink" title="建设银行一面"></a>建设银行一面</h2><blockquote><p>11 月 5 日</p></blockquote><ol><li>半结构化面试，多对一。<ol><li>自我介绍，不能透露自己的名字。</li><li>讲下自己抽的题</li><li>领导提问（老家是翁源的吗，愿意到翁源支行工作吗）</li></ol></li><li>等待 1 小时，面试 5 分钟。</li></ol><h2 id="趣丸科技三面"><a href="#趣丸科技三面" class="headerlink" title="趣丸科技三面"></a>趣丸科技三面</h2><blockquote><p>11 月 1 日，HR 面<br>17：00 - 17：25</p></blockquote><ol><li>自我介绍</li><li>实习</li><li>项目：收获，有没有出过什么矛盾等等</li><li>学习计划（这里不知道为什么说了：补下测试基础。这个过于减分了）</li><li>坚持的最久的事情（这里说了打卡英语单词，结果后面就问有没过六级，相当于给自己挖坑了）</li><li>毕业论文</li><li>测试未来发展</li><li>offer 情况以及期望薪资（这里说有几个和趣丸差不多的厂在走最后流程会好点，期望薪资被否掉后应该赶紧说个数）</li><li>反问<ol><li>这是最后一面吗</li><li>什么时候出结果</li><li>公司氛围（要是以后还有能进到 HR 面，我想会问“HR 能给我什么建议吗”）</li></ol></li></ol><h2 id="阶段反思与总结-4"><a href="#阶段反思与总结-4" class="headerlink" title="阶段反思与总结 4"></a>阶段反思与总结 4</h2><blockquote><p>建行居然给了面试机会，不过很多人都收到了，也许是海面，面试也很紧张，准备时间也不太够，感觉没有 5 分钟就让我进入了（还被那个 025 干扰了）。<br>趣丸的话虽然走完了全部流程，但是从 11 月 4 号趣丸发 offer 和还有人在面试测试岗的情况来看，其实懂的都懂。<br>三面都暴露了太多的问题了，能走完三面实属侥幸（或是 KPI），也许我们离这些厂差得太远太远，不知道有没有机会入测试这行呢？</p></blockquote><h2 id="英码科技一面"><a href="#英码科技一面" class="headerlink" title="英码科技一面"></a>英码科技一面</h2><blockquote><p>11 月 23 日 11：00，技术面<br>BOSS 直聘投的，HR 会在不同阶段问很多问题</p></blockquote><ol><li>自我介绍</li><li>JMeter 压测（具体），没答上来<ol><li>添加测试计划</li><li>添加线程组</li><li>添加 HTTP 请求</li><li>配置 HTTP 请求</li><li>添加查看结果树</li></ol></li><li>Docker 命令，没答上来<ol><li>查看镜像 docker images</li><li>下载镜像 docker pull</li><li>删除镜像 docker rmi</li><li>查看容器 docker ps</li></ol></li><li>SQL 相关，内连接，外连接</li><li>用哪些测试框架： Seleiumn，Pytest，Junit，unitTest，Appium</li><li>建议：<ol><li>基础比较扎实，对于应届生来说够用了，自动化要深入</li><li>公司都是 Python 技术栈</li></ol></li></ol><h2 id="英码科技二面"><a href="#英码科技二面" class="headerlink" title="英码科技二面"></a>英码科技二面</h2><blockquote><p>11 月 24 日 14：30，技术+HR 面<br>HR 问了很多问题，技术官是 AI 的部门主管</p></blockquote><ol><li>HR 面（有的经历其实没那么丰富，只能编，只能说是 3 分真 7 分假吧）</li><li>技术面</li><li>Spring 几个技术有什么区别</li><li>Web Socket 和 HTTP 的不同（说错了一点，Web Socket 是基于 HTTP 的）</li><li>Pytest 用来测试过什么。。。（没用过其实）</li><li>为什么选测试，究竟是找工作需要，还是什么的<br>说了理解复杂代码上可能有些吃力，感觉这个回答的不好。不可能说自己数学思维差吧。<br>面试完之后我确实在想我为什么选测试呢？测试这个岗位真的适合我吗？</li><li>建议：<br>技术官不愿意给我建议，说是自己不自信，我说希望得到互联网混了几年的建议。<br>于是技术官询问了我的未来规划，但最后还是没给我建议<br>HR 感觉有些在劝退我，她说可以多多了解不同的工作岗位，不仅仅是测试或者开发之类的</li></ol><h2 id="阶段反思与总结-5"><a href="#阶段反思与总结-5" class="headerlink" title="阶段反思与总结 5"></a>阶段反思与总结 5</h2><blockquote><p>英码是很偶然的一个机会，我觉得这次面试带给我们最大的教训便是 Python 对于测试来说是很重要的一门语言，光会 Java 是不行的。<br>星期五的时候我微信询问了下 HR 结果，却一直没回，等到晚上的时候，我看到这位 HR 发了朋友圈吹嘘说已经为封城准备好了。。。<br>变数太多了，截至 11 月 28 日，乃至趣丸、建行都没给最后回复。。。尤其是这个周末的发生一系列的事，只能说做好自己吧。<br>11 月 29 日，英码表示综合能力与他们希望的有所差别，已被拒。<br>11 月 29 日，建行开始电联第一批，所以也就这样了。</p></blockquote><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>12 月 12 日，我们抱着遗憾离开了学校，回到家以后，我投了几份实习简历，最终 OLA（伴伴）在好几个面试者中选择了我们，虽然远了些，但是待遇还可以，<br>于是我们就在 12 月 28 日去了 OLA，确实也不错，那时趣丸的状态依然是“面试评估”。<br>接着在 1 月 5 日，趣丸的补录看上了我们，询问我们是否愿意去，可以直接发 offer。<br>由于趣丸还是这个岗位，待遇也不错，最终我们在 1 月 7 日收到了 offer，1 月 11 日签好了三方协议。好像梦一样，现在回看这些，好像已经过去了很久很久。<br>希望也记住这段经历吧，好好学习，要争气，别丢脸吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同花顺笔试&quot;&gt;&lt;a href=&quot;#同花顺笔试&quot; class=&quot;headerlink&quot; title=&quot;同花顺笔试&quot;&gt;&lt;/a&gt;同花顺笔试&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天周一，基本满课，抽出时间做了同花顺的笔试，感谢同花顺，可以让我见见世面。&lt;br&gt;做笔试</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>完善项目</title>
    <link href="https://yebingiscn.github.io/2022/08/29/%E5%AE%8C%E5%96%84%E9%A1%B9%E7%9B%AE/"/>
    <id>https://yebingiscn.github.io/2022/08/29/%E5%AE%8C%E5%96%84%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-08-29T15:00:40.000Z</published>
    <updated>2023-09-12T15:36:31.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加-Swagger"><a href="#添加-Swagger" class="headerlink" title="添加 Swagger"></a>添加 Swagger</h2><pre><code>注意不要升级依赖到3.0，3.0很可能只支持新jdk开启方式: http://localhost:8080/swagger-ui.html#/</code></pre><h3 id="配置-config"><a href="#配置-config" class="headerlink" title="配置 config"></a>配置 config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标明是配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启swagger功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)  <span class="comment">// DocumentationType.SWAGGER_2 固定的，代表swagger2</span></span><br><span class="line"><span class="comment">//                .groupName(&quot;分布式任务系统&quot;) // 如果配置多个文档的时候，那么需要配置groupName来分组标识</span></span><br><span class="line">                .apiInfo(apiInfo()) <span class="comment">// 用于生成API信息</span></span><br><span class="line">                .select() <span class="comment">// select()函数返回一个ApiSelectorBuilder实例,用来控制接口被swagger做成文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.example.controller&quot;</span>)) <span class="comment">// 用于指定扫描哪个包下的接口</span></span><br><span class="line">                .paths(PathSelectors.any())<span class="comment">// 选择所有的API,如果你想只为部分API生成文档，可以配置这里</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于定义API主界面的信息，比如可以声明所有的API的总标题、描述、版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;老人跌倒系统API&quot;</span>) <span class="comment">//  可以用来自定义API的主标题</span></span><br><span class="line">                .description(<span class="string">&quot;老人跌倒系统SwaggerAPI管理&quot;</span>) <span class="comment">// 可以用来描述整体的API</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;&quot;</span>) <span class="comment">// 用于定义服务的域名</span></span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>) <span class="comment">// 可以用来定义版本。</span></span><br><span class="line">                .build(); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-caffeine-缓存接口"><a href="#使用-caffeine-缓存接口" class="headerlink" title="使用 caffeine 缓存接口"></a>使用 caffeine 缓存接口</h2><pre><code>Caffeine的底层数据存储采用ConcurrentHashMap，在本次使用中采用的是手动方式</code></pre><h3 id="配置-config-1"><a href="#配置-config-1" class="headerlink" title="配置 config"></a>配置 config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">//注意这个注解一定要打上</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Cache&lt;Integer, List&lt;Object&gt;&gt; <span class="title function_">caffeineCache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Caffeine.newBuilder()</span><br><span class="line">                <span class="comment">// 手动填充</span></span><br><span class="line">                <span class="comment">// 设置最后一次写入或访问后经过固定时间过期</span></span><br><span class="line">                .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">// 初始的缓存空间大小</span></span><br><span class="line">                .initialCapacity(<span class="number">10</span>)</span><br><span class="line">                <span class="comment">// 缓存的最大条数</span></span><br><span class="line">                .maximumSize(<span class="number">100</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><pre><code>总感觉有点像没用上，和我在内存里手动加一个HashMap有什么不同呢当然可能简单的没区别，复杂的就难说了而且手动加容易被GC</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, List&lt;Admin&gt;&gt; adminInfoMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Cache&lt;Integer, List&lt;Admin&gt;&gt; caffeineCache;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;Admin&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        return adminMapper.getAllUser();</span></span><br><span class="line">        caffeineCache.getIfPresent(<span class="number">1</span>);</span><br><span class="line">        List&lt;Admin&gt; objects = caffeineCache.asMap().get(<span class="number">1</span>); <span class="comment">//1是因为没有传入值，手动指定</span></span><br><span class="line">        <span class="keyword">if</span> (objects == <span class="literal">null</span>) &#123;  <span class="comment">//缓存里没有，去数据库搜</span></span><br><span class="line">            List&lt;Admin&gt; allUser = adminMapper.getAllUser();</span><br><span class="line">            caffeineCache.put(<span class="number">1</span>, allUser);</span><br><span class="line">            <span class="keyword">return</span> allUser;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objects;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;添加-Swagger&quot;&gt;&lt;a href=&quot;#添加-Swagger&quot; class=&quot;headerlink&quot; title=&quot;添加 Swagger&quot;&gt;&lt;/a&gt;添加 Swagger&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;注意不要升级依赖到3.0，3.0很可能只支持新jdk
开启方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法详解</title>
    <link href="https://yebingiscn.github.io/2022/08/18/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://yebingiscn.github.io/2022/08/18/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-08-18T09:42:28.000Z</published>
    <updated>2023-02-10T16:33:38.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><pre><code>因为我的数学不好，所以我不喜欢算法，根本原因还是我解不出来，尽是挫败感。但是不学不行，而且我觉得，搞个合格还是没问题的。</code></pre><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;<span class="comment">//这里千万要注意-1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length - <span class="number">1</span> - i; j++) &#123;<span class="comment">//这里千万要注意length-1-i</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = nums[j];</span><br><span class="line">                    nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                    nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (min &lt;= target) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">center</span> <span class="operator">=</span> (max + min) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[center] == target) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//找到了</span></span><br><span class="line">            <span class="keyword">if</span> (nums[center] &gt; target) max = center - <span class="number">1</span>;<span class="comment">//目标在中央的左边</span></span><br><span class="line">            <span class="keyword">if</span> (nums[center] &lt; target) min = center + <span class="number">1</span>;<span class="comment">//目标在中央的右边</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><pre><code>假定左边的有序，（从左到右）一次拿出一张，一个个移动到合适的位置</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;<span class="comment">//这里可以忽略掉第一个，因为是假定左边的有序，第一个自然可以忽略</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; nums[j]) &#123;<span class="comment">//注意这里两个都是j</span></span><br><span class="line">                nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre><code>每次遍历选最大的排在前面</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> nums[i];  <span class="comment">//获得最左边的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">location</span> <span class="operator">=</span> i;   <span class="comment">//获取最右边的值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123; <span class="comment">//获取i左边的值</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; min) &#123;    <span class="comment">//比较</span></span><br><span class="line">                    min = nums[j];    <span class="comment">//现在是左边的值来比较了</span></span><br><span class="line">                    location = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i]; <span class="comment">//交换值</span></span><br><span class="line">            nums[i] = nums[location];</span><br><span class="line">            nums[location] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><pre><code>采用分治法思维</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123; <span class="comment">//分到不能再小了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> arr[start];<span class="comment">//k是基准元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> start; <span class="comment">//头</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> end;   <span class="comment">//尾</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123; </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; k &lt;= arr[right]) &#123; <span class="comment">//从右边开始，第一个条件指的是right不能无限减，第二个条件即判断与基准的关系</span></span><br><span class="line">            right--; </span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[right];<span class="comment">//找到交换的了，进行交换，left值已经给了k，所以可以直接覆盖</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; k &gt;= arr[right]) &#123;<span class="comment">//跟上面一样的，只不过这里是left从左边开始 </span></span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[right] = arr[left];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[right] = k;<span class="comment">//所有的值与k比较，如果可以，换掉right的位置</span></span><br><span class="line">    sort(arr, start, right - <span class="number">1</span>);<span class="comment">//完成了一次快速排序，然后分治，第一个到中间</span></span><br><span class="line">    sort(arr, right + <span class="number">1</span>, end);<span class="comment">//中间到最后一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h2><pre><code>堆排序、快速排序、希尔排序、直接选择排序是不稳定的排序算法，而冒泡排序、直接插入排序、折半插入排序、归并排序是稳定的排序算法。</code></pre><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(List&lt;Integer&gt; list, TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//遇到空节点则返回</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//先遍历根节点</span></span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="comment">//再去左子树</span></span><br><span class="line">        preorder(list, root.left);</span><br><span class="line">        <span class="comment">//假如是中序遍历就是这里  list.add(root.val);</span></span><br><span class="line">        <span class="comment">//最后去右子树</span></span><br><span class="line">        preorder(list, root.right);</span><br><span class="line">        <span class="comment">//假如是后序遍历就是这里  list.add(root.val);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">//添加遍历结果的数组</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//递归前序遍历</span></span><br><span class="line">        preorder(list, root);</span><br><span class="line">        <span class="comment">//返回的结果</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++)</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历层序二叉树"><a href="#遍历层序二叉树" class="headerlink" title="遍历层序二叉树"></a>遍历层序二叉树</h2><pre><code>这个乍一看肯定会感觉毫无头绪，你说正常来说都是向被遍历左子树再到右子树，这怎么可能层序呢，结果可以.left、.right。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;<span class="comment">//如果是空，则直接返回空数组</span></span><br><span class="line">            <span class="keyword">return</span> res; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//队列存储，进行层次遍历</span></span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;TreeNode&gt;(); </span><br><span class="line">        q.add(root);<span class="comment">//添加根节点</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//记录二叉树的某一行</span></span><br><span class="line">            ArrayList&lt;Integer&gt; row = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();  </span><br><span class="line">            <span class="comment">//因先进入的是根节点，故每层节点多少，队列大小就是多少</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; q.size(); i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                row.add(cur.val);</span><br><span class="line">                <span class="comment">//若是左右孩子存在，则存入左右孩子作为下一个层次</span></span><br><span class="line">                <span class="keyword">if</span>(cur.left != <span class="literal">null</span>)</span><br><span class="line">                    q.add(cur.left);<span class="comment">//存左节点</span></span><br><span class="line">                <span class="keyword">if</span>(cur.right != <span class="literal">null</span>)</span><br><span class="line">                    q.add(cur.right);<span class="comment">//存右节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每一层加入输出</span></span><br><span class="line">            res.add(row); <span class="comment">//添加进输出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树之字形层序遍历"><a href="#二叉树之字形层序遍历" class="headerlink" title="二叉树之字形层序遍历"></a>二叉树之字形层序遍历</h2><pre><code>这题比较抽象，需要画图理解，但其实原理很简单，注意第二层从右至左，第三层从左到右。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title function_">Print</span><span class="params">(TreeNode pRoot)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存放奇数层的节点，从1开始</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack1.push(pRoot);</span><br><span class="line">        <span class="comment">// 存放偶数层的节点</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 表示当前遍历第几层，奇数则顺序打印，偶数逆序打印, 从第1层开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 处理奇数层</span></span><br><span class="line">            <span class="keyword">if</span>(level % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="comment">// 奇数层按顺序</span></span><br><span class="line">                <span class="keyword">while</span>(!stack1.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack1.pop();</span><br><span class="line">                    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 收集打印结果</span></span><br><span class="line">                        list.add(node.val);</span><br><span class="line">                        <span class="comment">// stack2保存偶数层节点，先存左结点，这样等下次pop时就是右节点先打印，满足题目要求</span></span><br><span class="line">                        stack2.push(node.left);</span><br><span class="line">                        stack2.push(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 收集当前层的结果</span></span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty()) &#123;</span><br><span class="line">                    res.add(list);</span><br><span class="line">                    level++;</span><br><span class="line">                &#125;                 </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 处理偶数层</span></span><br><span class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();        </span><br><span class="line">                <span class="keyword">while</span>(!stack2.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack2.pop();</span><br><span class="line">                    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">                        list.add(node.val);</span><br><span class="line">                        <span class="comment">// 需要按顺序push，因为stack1是用在奇数层按顺序输出结果的</span></span><br><span class="line">                        <span class="comment">//先右后左的原因发个图就能明白</span></span><br><span class="line">                        stack1.add(node.right);</span><br><span class="line">                        stack1.add(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!list.isEmpty()) &#123;</span><br><span class="line">                    res.add(list);</span><br><span class="line">                    level++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><pre><code>这个代码简单，但是return这句这个理解起来却有些抽象，简单来说就是不要看成一句，而是要看成三句。最后才是Math.max</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//空节点没有深度</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//返回子树深度+1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> maxDepth(root.left)<span class="comment">//递归</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> Math.max(a, b) + <span class="number">1</span>; <span class="comment">//+1是加上根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树中和为某一值的路径-一"><a href="#二叉树中和为某一值的路径-一" class="headerlink" title="二叉树中和为某一值的路径(一)"></a>二叉树中和为某一值的路径(一)</h2><pre><code>这个很容易想到可以用递归的思路来做，但是sum - root.val还是比较难想到的这个思想还是要理解下，有时候有点难理解遍历的过程，还得多想多思考</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span> <span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span> &amp;&amp; sum - root.val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (hasPathSum(root.left, sum - root.val) </span><br><span class="line">                || hasPathSum(root.right, sum - root.val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><h3 id="采用栈实现"><a href="#采用栈实现" class="headerlink" title="采用栈实现"></a>采用栈实现</h3><pre><code>栈比较好理解，也是我第一个想到的思路，但是当时我不会将思路变成代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">ReverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;<span class="comment">//把链表节点全部摘掉放到栈中</span></span><br><span class="line">            stack.push(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//判断链表是不是空的</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop();<span class="comment">//不是的话先出来个最后一个节点或者是新的头节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> node;<span class="comment">//dummy就是新头节点，因为node要一个个向前连接，所以代表新链表的重任落到了dummy的头上</span></span><br><span class="line">        <span class="comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            node.next = tempNode;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一个结点就是反转前的头结点，一定要让他的next</span></span><br><span class="line">        <span class="comment">//等于空，否则会构成环</span></span><br><span class="line">        node.next = <span class="literal">null</span>;<span class="comment">//node.next = dummy dummy.next = node，成环了</span></span><br><span class="line">        <span class="keyword">return</span> dummy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部反转链表"><a href="#局部反转链表" class="headerlink" title="局部反转链表"></a>局部反转链表</h2><pre><code>1-&gt;2-&gt;3-&gt;4-&gt;5 =&gt; 1-&gt;4-&gt;3-&gt;2-&gt;5</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span> <span class="params">(ListNode head, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        first.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;<span class="comment">//从第二个开始移动</span></span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = temp.next;</span><br><span class="line">            temp.next = pre.next;</span><br><span class="line">            pre.next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first.next;<span class="comment">//这里假如return head 用例&#123;1,3&#125;只会输出1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class="line">        <span class="comment">//一个已经为空了，直接返回另一个</span></span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">null</span>) </span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        <span class="comment">//加一个表头</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>); </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//两个链表都要不为空</span></span><br><span class="line">        <span class="keyword">while</span>(list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>)&#123; </span><br><span class="line">            <span class="comment">//取较小值的节点</span></span><br><span class="line">            <span class="keyword">if</span>(list1.val &lt;= list2.val)&#123; </span><br><span class="line">                cur.next = list1;</span><br><span class="line">                <span class="comment">//只移动取值的指针</span></span><br><span class="line">                list1 = list1.next; </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur.next = list2;</span><br><span class="line">                <span class="comment">//只移动取值的指针</span></span><br><span class="line">                list2 = list2.next; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//指针后移</span></span><br><span class="line">            cur = cur.next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//哪个链表还有剩，直接连在后面</span></span><br><span class="line">        <span class="keyword">if</span>(list1 != <span class="literal">null</span>) </span><br><span class="line">            cur.next = list1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur.next = list2;</span><br><span class="line">        <span class="comment">//返回值去掉表头</span></span><br><span class="line">        <span class="keyword">return</span> head.next; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="合并两个有序的数组"><a href="#合并两个有序的数组" class="headerlink" title="合并两个有序的数组"></a>合并两个有序的数组</h2><pre><code>假设两个数组A，B 现假设AB数组是有序的，并且要合并到A里</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> m, <span class="type">int</span> B[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i != n; i++) &#123;</span><br><span class="line">            A[m + i] = B[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是否为回文字符串"><a href="#判断是否为回文字符串" class="headerlink" title="判断是否为回文字符串"></a>判断是否为回文字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge</span> <span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(left) == str.charAt(right)) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="最小的括号序列"><a href="#最小的括号序列" class="headerlink" title="最小的括号序列"></a>最小的括号序列</h2><pre><code>注意一定要用else if</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span> <span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//辅助栈</span></span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Character&gt;(); </span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123; </span><br><span class="line">            <span class="comment">//遇到左小括号</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;(&#x27;</span>) </span><br><span class="line">                <span class="comment">//期待遇到右小括号</span></span><br><span class="line">                st.push(<span class="string">&#x27;)&#x27;</span>); </span><br><span class="line">            <span class="comment">//遇到左中括号</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;[&#x27;</span>) </span><br><span class="line">                <span class="comment">//期待遇到右中括号</span></span><br><span class="line">                st.push(<span class="string">&#x27;]&#x27;</span>); </span><br><span class="line">            <span class="comment">//遇到左打括号</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;&#123;&#x27;</span>) </span><br><span class="line">                <span class="comment">//期待遇到右打括号</span></span><br><span class="line">                st.push(<span class="string">&#x27;&#125;&#x27;</span>); </span><br><span class="line">            <span class="comment">//必须有左括号的情况下才能遇到右括号</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.isEmpty() || st.pop() != s.charAt(i)) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//栈中是否还有元素</span></span><br><span class="line">        <span class="keyword">return</span> st.isEmpty(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; s2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> node)</span> &#123;</span><br><span class="line">        s1.push(node);</span><br><span class="line">        <span class="keyword">if</span>(s2.isEmpty() || s2.peek() &gt; node)&#123;</span><br><span class="line">            s2.push(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//这里重复入栈的原因是要与s1的位置一一对应</span></span><br><span class="line">            s2.push(s2.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        s1.pop();</span><br><span class="line">        s2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s2.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="双栈实现队列"><a href="#双栈实现队列" class="headerlink" title="双栈实现队列"></a>双栈实现队列</h2><pre><code>如题：双栈实现，就是先都塞进一个栈中。pop第一个时把所有的都放到第二个栈里，这样就反过来了，就可以实现出栈</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> node)</span> &#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//将第一个栈中内容弹出放入第二个栈中</span></span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty()) </span><br><span class="line">            stack2.push(stack1.pop()); </span><br><span class="line">        <span class="comment">//第二个栈栈顶就是最先进来的元素，即队首</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> stack2.pop(); </span><br><span class="line">        <span class="comment">//再将第二个栈的元素放回第一个栈</span></span><br><span class="line">        <span class="keyword">while</span>(!stack2.isEmpty()) </span><br><span class="line">            stack1.push(stack2.pop());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><pre><code>很经典的题了，好像LeeCode的第一题就是这个暴力解法很容易出结果，但是要注意两点1. 牛客网的.length什么的一定要外面接收，这样速度也比较快2. 注意局部变量作用域的问题</code></pre><h3 id="双层for循环（两个指针）暴力解决，时间复杂度为n-2"><a href="#双层for循环（两个指针）暴力解决，时间复杂度为n-2" class="headerlink" title="双层for循环（两个指针）暴力解决，时间复杂度为n^2"></a>双层for循环（两个指针）暴力解决，时间复杂度为n^2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum (<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> numbers.length;</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[i] + numbers [j] == target) &#123;</span><br><span class="line">                    num[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">                    num[<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> num;<span class="comment">//有了立即返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;<span class="comment">//注意i,j的作用域，在这里才返回的话会为空</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希解法"><a href="#哈希解法" class="headerlink" title="哈希解法"></a>哈希解法</h3><pre><code>节约了一次for循环</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum (<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="comment">//将不包含target - numbers[i]，装入map中，包含的话直接返回下标</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target - numbers[i])) <span class="comment">//比方说target = 6， 现在map中有2，i = 4</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - numbers[i])+<span class="number">1</span>, i+<span class="number">1</span>&#125;; <span class="comment">//其实数组是这个&#123;map.get()+1,i+1&#125; </span></span><br><span class="line">                <span class="comment">// +1是因为要求从1开始</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                map.put(numbers[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h2><h3 id="数组排序解法"><a href="#数组排序解法" class="headerlink" title="数组排序解法"></a>数组排序解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">MoreThanHalfNum_Solution</span><span class="params">(<span class="type">int</span> [] array)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(array.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">return</span> array[array.length/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希解法-1"><a href="#哈希解法-1" class="headerlink" title="哈希解法"></a>哈希解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">MoreThanHalfNum_Solution</span><span class="params">(<span class="type">int</span> [] array)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(array == <span class="literal">null</span> || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(array.length == <span class="number">1</span>) <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">       <span class="comment">// hashmap存储数字和它的出现次数</span></span><br><span class="line">       HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">           <span class="comment">// 若map中没有，则放入hashmap，并将次数置为1</span></span><br><span class="line">           <span class="keyword">if</span>(!map.containsKey(array[i]))&#123;</span><br><span class="line">               map.put(array[i],<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(map.get(array[i]) &lt; array.length/<span class="number">2</span>)&#123;</span><br><span class="line">               <span class="comment">// 若map中有，且次数少于一半，就将map中的次数加1，如果判断大于再返回会得不到结果</span></span><br><span class="line">               map.put(array[i],map.get(array[i])+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">// 若map中有，且次数多于或等于一半，则直接返回该数</span></span><br><span class="line">               <span class="keyword">return</span> array[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>) + Fibonacci(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="买卖股票的最佳时机（一）"><a href="#买卖股票的最佳时机（一）" class="headerlink" title="买卖股票的最佳时机（一）"></a>买卖股票的最佳时机（一）</h2><p>假设你有一个数组prices，长度为n，其中prices[i]是股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益</p><ol><li>你可以买入一次股票和卖出一次股票，并非每天都可以买入或卖出一次，总共只能买入和卖出一次，且买入必须在卖出的前面的某一天</li><li>如果不能获取到任何利润，请返回0</li><li>假设买入卖出均无手续费</li></ol><h3 id="解法：贪心算法，简单来来说就是遍历，找到最小值和找到差值最大的即是利润。"><a href="#解法：贪心算法，简单来来说就是遍历，找到最小值和找到差值最大的即是利润。" class="headerlink" title="解法：贪心算法，简单来来说就是遍历，找到最小值和找到差值最大的即是利润。"></a>解法：贪心算法，简单来来说就是遍历，找到最小值和找到差值最大的即是利润。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span> <span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">profit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; min) &#123;</span><br><span class="line">                min = prices[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - min &gt; profit) &#123;</span><br><span class="line">                profit = prices[i] - min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串变形"><a href="#字符串变形" class="headerlink" title="字符串变形"></a>字符串变形</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">trans</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        StringBuffer res=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">//大小写转换</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) &lt;= <span class="string">&#x27;Z&#x27;</span> &amp;&amp; s.charAt(i) &gt;= <span class="string">&#x27;A&#x27;</span>)   </span><br><span class="line">                res.append((<span class="type">char</span>)(s.charAt(i) - <span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s.charAt(i) &lt;= <span class="string">&#x27;z&#x27;</span>) </span><br><span class="line">                res.append((<span class="type">char</span>)(s.charAt(i) - <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">             <span class="keyword">else</span> </span><br><span class="line">                <span class="comment">//空格直接复制</span></span><br><span class="line">                res.append((<span class="type">char</span>)(s.charAt(i)));  </span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;String&gt; temp=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">//以空格为界，分割单词</span></span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; res.charAt(j) != <span class="string">&#x27; &#x27;</span>)  </span><br><span class="line">                j++;</span><br><span class="line">            <span class="comment">//单词进栈</span></span><br><span class="line">            temp.push((String)(res.substring(i, j)));  </span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排除结尾空格的特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(s.charAt(n - <span class="number">1</span>) == <span class="string">&#x27; &#x27;</span>)  </span><br><span class="line">            res = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">//栈遵循先进后厨，单词顺序是反的</span></span><br><span class="line">        <span class="keyword">while</span>(!temp.empty())&#123;   </span><br><span class="line">            res.append(temp.peek());</span><br><span class="line">            temp.pop();</span><br><span class="line">            <span class="keyword">if</span>(!temp.empty())</span><br><span class="line">                res.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第一个只出现一次的字符"><a href="#第一个只出现一次的字符" class="headerlink" title="第一个只出现一次的字符"></a>第一个只出现一次的字符</h2><pre><code>在一个长为 字符串中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">FirstNotRepeatingChar</span><span class="params">(String str)</span> &#123;</span><br><span class="line">       HashMap&lt;Character, Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">           hm.put(str.charAt(i),hm.getOrDefault(str.charAt(i),<span class="number">0</span>) + <span class="number">1</span>);<span class="comment">//getOrDefault意思是有就用，没有就默认</span></span><br><span class="line">       &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hm.get(str.charAt(i)) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他算法题"><a href="#其他算法题" class="headerlink" title="其他算法题"></a>其他算法题</h1><h2 id="小球走过路程计算"><a href="#小球走过路程计算" class="headerlink" title="小球走过路程计算"></a>小球走过路程计算</h2><pre><code>一球从h米高度自由落下，每次落地后反弹回原高度的一半再落下，求它在第n次落地时共经过了多少米？第n次反弹多高？输入描述：输入小球的初始高度和落地的次数（先输入小球初始高度再输入反弹次数）输出描述：输出小球反弹的高度和经过的距离（先输出反弹的高度再输出经过的距离，中间用空格隔开）</code></pre><p>题解：其实这道题并不难，第一次下落100m，第二次上去50m，下来50米，如此递推。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">计算方法：</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">float</span> h=scanner.nextFloat();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span>scanner.nextInt();</span><br><span class="line">        <span class="type">float</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; n; i++) &#123;</span><br><span class="line">            len += h;   <span class="comment">//这里计算下来的</span></span><br><span class="line">            h /= <span class="number">2</span>;     <span class="comment">//计算下一次反弹的高度</span></span><br><span class="line">            <span class="keyword">if</span>(i == n - <span class="number">1</span>) &#123;    <span class="comment">//n-1的意思是最后一次循环</span></span><br><span class="line">                 System.out.println</span><br><span class="line">                    (String.format(<span class="string">&quot;%.3f&quot;</span>, h)+<span class="string">&quot; &quot;</span>+String.format(<span class="string">&quot;%.3f&quot;</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">            len += h;   <span class="comment">//计算上去的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">isPrimeNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//满足以下条件不是质数(1+2)或(3)</span></span><br><span class="line">        <span class="comment">//1 非2的偶数</span></span><br><span class="line">        <span class="comment">//2 奇数(除1和本身)有其他奇数因子</span></span><br><span class="line">        <span class="comment">//3 2到开根号之间有因子</span></span><br><span class="line">        <span class="keyword">if</span>(number!=<span class="number">2</span> &amp;&amp; number%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;number;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入一个数，如果各位数之和小于10，则输出位数之和，否则将位数之和继续求和，直到小于10，并输出"><a href="#输入一个数，如果各位数之和小于10，则输出位数之和，否则将位数之和继续求和，直到小于10，并输出" class="headerlink" title="输入一个数，如果各位数之和小于10，则输出位数之和，否则将位数之和继续求和，直到小于10，并输出"></a>输入一个数，如果各位数之和小于10，则输出位数之和，否则将位数之和继续求和，直到小于10，并输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">digitalRoot</span><span class="params">(String s)</span>&#123;</span><br><span class="line"><span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">temp+=(<span class="type">int</span>)s.charAt(i)-(<span class="type">int</span>)<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;=<span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp&gt;<span class="number">9</span>)&#123;</span><br><span class="line">     <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(temp/<span class="number">10</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="number">100</span>)&#123;</span><br><span class="line">sum=temp/<span class="number">10</span>+temp%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> r=temp/<span class="number">10</span>;</span><br><span class="line">sum+=temp%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(System.in));</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">s = cin.next()</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Main</span>().digitalRoot(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h2><p>现在有2副扑克牌，从扑克牌中随机五张扑克牌，我们需要来判断一下是不是顺子。<br>有如下规则：</p><ol><li>A为1，J为11，Q为12，K为13，A不能视为14</li><li>大、小王为 0，0可以看作任意牌</li><li>如果给出的五张牌能组成顺子（即这五张牌是连续的）就输出true，否则就输出false。</li><li>数据保证每组5个数字，每组最多含有4个零，数组的数取值为 [0, 13]</li></ol><p>要求：空间复杂度 O(1)O(1)，时间复杂度 O(nlogn)O(nlogn)，本题也有时间复杂度 O(n)O(n) 的解法<br>输入描述：<br>输入五张扑克牌的值<br>返回值描述：<br>五张扑克牌能否组成顺子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsContinuous</span><span class="params">(<span class="type">int</span> [] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">joker</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] == <span class="number">0</span>) joker++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] == numbers[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[<span class="number">4</span>] - numbers[joker] &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法详解&quot;&gt;&lt;a href=&quot;#算法详解&quot; class=&quot;headerlink&quot; title=&quot;算法详解&quot;&gt;&lt;/a&gt;算法详解&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;因为我的数学不好，所以我不喜欢算法，根本原因还是我解不出来，尽是挫败感。但是不学不行，而且我觉得，搞个合格还</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>暑期复习笔记</title>
    <link href="https://yebingiscn.github.io/2022/08/18/%E6%9A%91%E6%9C%9F%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yebingiscn.github.io/2022/08/18/%E6%9A%91%E6%9C%9F%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-18T08:45:20.000Z</published>
    <updated>2022-08-29T05:09:51.685Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这个暑期学了很多东西，也需要个笔记来记录一下，不然都不记得了。</code></pre><h2 id="Vs-code编辑md"><a href="#Vs-code编辑md" class="headerlink" title="Vs code编辑md"></a>Vs code编辑md</h2><ul><li>使用Ctrl+shift+v预览md效果</li><li>采用<code>语言 </code>的形式来包裹代码</li><li>更多语法：<a href="https://zhuanlan.zhihu.com/p/108984311">https://zhuanlan.zhihu.com/p/108984311</a></li></ul><h2 id="多级评论的实现"><a href="#多级评论的实现" class="headerlink" title="多级评论的实现"></a>多级评论的实现</h2><ol><li>区分一级评论主表和次级评论表，彼此之间用外键相连</li><li>采用<code>Map&lt;评论表, List&lt;次级评论表&gt;&gt;</code>的方式接收<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">List&lt;CommentInfo&gt; allComment = mapper.getAllComment();</span><br><span class="line">    Map&lt;CommentInfo, List&lt;ChildCommentInfo&gt;&gt; commentInfoMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; allComment.size()) &#123;</span><br><span class="line">        <span class="type">CommentInfo</span> <span class="variable">commentInfo</span> <span class="operator">=</span> allComment.get(i);</span><br><span class="line">        commentInfoMap.put(commentInfo, mapper.getAllChildComment(commentInfo.getId()));</span><br><span class="line">        i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="for循环之性能优化"><a href="#for循环之性能优化" class="headerlink" title="for循环之性能优化"></a>for循环之性能优化</h2><p>参考：<a href="https://blog.csdn.net/qimowei/article/details/113701999">https://blog.csdn.net/qimowei/article/details/113701999</a></p><ol><li>写在第一个(消除循环终止判断时的方法调用)，不过这会带来要给新变量命名的问题，降低了可读性</li><li>嵌套循环应该遵循“外小内大”的原则</li><li>提取与循环无关的表达式</li><li>不要将<code>try catch</code>放到循环内部<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="正则表达式的简单应用"><a href="#正则表达式的简单应用" class="headerlink" title="正则表达式的简单应用"></a>正则表达式的简单应用</h2><pre><code>以前我学到的正则表达式还得获取Matcher对象的,现在发现有更简单的</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.matches(emailMatcher);<span class="comment">//里面是正则表达式的字符串</span></span><br></pre></td></tr></table></figure><h2 id="为什么不能在增强for循环和迭代过程中通过list本身进行添加-删除操作"><a href="#为什么不能在增强for循环和迭代过程中通过list本身进行添加-删除操作" class="headerlink" title="为什么不能在增强for循环和迭代过程中通过list本身进行添加&#x2F;删除操作"></a>为什么不能在增强for循环和迭代过程中通过list本身进行添加&#x2F;删除操作</h2><pre><code>在增强for循环和迭代器遍历的过程中对list操作会失败，这是为什么呢？</code></pre><p>ArrayList源代码中有这么一个方法：在迭代器的hasNext()、next()方法都会被调用。<br>作用是判断list的大小有没有变化，如果变了，就抛异常。<br>也就是说，源代码就规定了不能在迭代过程中通过List本身进行添加&#x2F;删除操作。<br>此外，<code>list.remove(s)</code>:通过数组遍历,找到s将其删除,然后把后面的元素前移,size-1。<br><code>iterator.remove()</code>:原理一样,但是<code>iterator.hasNext()</code>判断的是有没有下一个元素,cursor指向的是下一个元素的索引。<br>简单来说就是这个迭代遍历的时候长度是固定的，假如删除或者增加了，长度改变，cursor无法更新这个长度或者识别这个元素。</p><h2 id="双端队列ArrayDeque"><a href="#双端队列ArrayDeque" class="headerlink" title="双端队列ArrayDeque"></a>双端队列ArrayDeque</h2><ul><li>ArrayDeque是采用数组方式实现的双端队列。</li><li>ArrayDeque的出队入队是通过头尾指针循环，利用数组实现的。</li><li>ArrayDeque容量不足时是会扩容的，每次扩容容量增加一倍。</li><li>ArrayDeque可以直接作为栈使用。当用作栈时，性能优于Stack，当用于队列时，性能优于LinkedList。</li><li>无容量大小限制，容量按需增长。</li><li>非线程安全队列，无同步策略，不支持多线程安全访问。</li><li>具有fail-fast特性，不能存储null值，支持双向迭代器遍历。<br>  应该是一种双向指针的链表。可以直接删除第一个，也可以删除最后一个<br><strong>注意：可能是bug或者偶然，在遍历的时候，ArrayDeque.size作为for循环条件很有可能会出现异常结果，可以将其放到for循环外</strong></li></ul><h2 id="红黑树、B树与B-树"><a href="#红黑树、B树与B-树" class="headerlink" title="红黑树、B树与B+树"></a>红黑树、B树与B+树</h2><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ol><li>特点<ul><li>是个二叉树，当两个子树不平衡的时候会进行旋转（最多三次）平衡左右两边，免得变成链表</li><li>每个节点或者是黑色，或者是红色。</li><li>根节点是黑色。</li><li>每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。</li></ul></li><li>用途<br> java中使用到红黑树的有TreeSet和JDK1.8的HashMap。</li><li>为什么HashMap底层不用B&#x2F;B+树<br> 红黑树在内存中查找非常快，红黑树实现也比B树&#x2F;B+树实现简单，B&#x2F;B+树多路子树相比红黑树空间开销自然也更大。</li></ol><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><ol><li>用途<br> B树多用于做文件系统的索引。</li><li>特点<br> B树不是个二叉树，他的子树更多也就是路数越多</li><li>为什么二叉树不能用于文件系统<br> 因为文件系统和数据库一般都是存在电脑硬盘上的，如果数据量太大的话不一定能一次性加载到内存中。而二叉树得加载完才能找，这样开销就比较大。</li></ol><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><ol><li>用途<br> B+树多用于数据库的索引</li><li>特点<br> 相比B树多了索引，B+树同样不是个二叉树</li><li>为什么B+树在数据库中做索引<br> 因为在数据库中select常常不只是查询一条记录，常常要查询多条记录。比如：按照id的排序的后10条。如果是多条的话，B树需要做中序遍历，可能要跨层访问。而B+树由于所有数据都在叶子结点，不用跨层，同时由于有链表结构，只需要找到首尾，通过链表就能够把所有数据取出来了。</li></ol><h2 id="一个项目跟着教程做完，应该怎么总结？"><a href="#一个项目跟着教程做完，应该怎么总结？" class="headerlink" title="一个项目跟着教程做完，应该怎么总结？"></a>一个项目跟着教程做完，应该怎么总结？</h2><ol><li>我们怎么去跟着教程或者视频做的项目：<br>  是他写一句我们写一句，还是我们把整个项目或者某一个模块看完了，再去写的，然后写到不会就去研究他是怎么写的</li><li>思考深度：<br> 假如有人问我们  为什么这一块要这样写， 项目亮点是什么 ，项目哪块做起来比较难，哪些地方做完让自己收获很大，为什么想做这个项目，后续还有拓展什么，自己写这个项目的整体思路是什么，为什么这样设计，技术选型为啥选这个而不是其他的。。。</li><li>对于某个重要模块有哪些实现方式，这些方式间的区别是什么？你选择其中一种方式的理由是什么？<br> 性能or便于实现or扩展性好利于后续升级之类。<br> 我个人而言还有一点就是……做完之后，出去能跟别人吹这个项目的任何原理、精妙的代码实现细节，我就感觉这个算是我自己的项目了</li></ol><h2 id="计算基本路径法"><a href="#计算基本路径法" class="headerlink" title="计算基本路径法"></a>计算基本路径法</h2><p>可以通过计算谓词节点来做，公式为  基本路径&#x3D;谓词节点+1；<br>谓词节点是指程序中的条件语句，该题中依次有while，if，if三个条件语句，故有四条基本路径。</p><h2 id="计算圈复杂度"><a href="#计算圈复杂度" class="headerlink" title="计算圈复杂度"></a>计算圈复杂度</h2><p>圈复杂度实际上就是等于判定节点的数量再加上1。对应的计算公式为：V (G) &#x3D; P + 1</p><h2 id="测试概念"><a href="#测试概念" class="headerlink" title="测试概念"></a>测试概念</h2><ul><li>逻辑覆盖法和基本路径测试是白盒测试的大分类；</li><li>正交实验设计法：也是不涉及代码内部结构的典型的黑盒测试方法；</li><li>边界值法在黑盒测试中，我们可以不涉及代码来取边界值；但是也可以在设计代码时，比如在条件覆盖等白盒测试方法中取到边界值，因为往往边界值的位置容易出错</li><li>在白盒测试法中，选择足够的测试用例，使得每个判定中条件的各种可能组合都至少出现一次。AB都符合，A符合B不符合，A不符合B符合，AB都不符合。</li><li>工件是加工过程中的生产对象。项目立项前，测试人员是不需要提供任何工件的。</li><li>GUI测试手段是系统测试手段</li></ul><h2 id="BCryptPasswordEncoder的比较"><a href="#BCryptPasswordEncoder的比较" class="headerlink" title="BCryptPasswordEncoder的比较"></a>BCryptPasswordEncoder的比较</h2><p>采用encoder.matches(不加密的密码,加密密码);进行比较</p><h2 id="风险曝光度"><a href="#风险曝光度" class="headerlink" title="风险曝光度"></a>风险曝光度</h2><p>风险曝光度（riskexposure）&#x3D;错误出现率（风险出现率）X错误造成损失（风险损失）：<br>风险成本 &#x3D; 20 x 100 x 150 x 50% &#x3D;150000元<br>风险概率 &#x3D; 60%<br>风险曝光度 &#x3D; 150000元 x 60% &#x3D; 90000元</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;这个暑期学了很多东西，也需要个笔记来记录一下，不然都不记得了。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;Vs-code编辑md&quot;&gt;&lt;a href=&quot;#Vs-code编辑md&quot; class=&quot;headerlink&quot; title=&quot;Vs code编辑md&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ak的获取方法</title>
    <link href="https://yebingiscn.github.io/2022/08/13/Ak%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/"/>
    <id>https://yebingiscn.github.io/2022/08/13/Ak%E7%9A%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-13T09:56:05.000Z</published>
    <updated>2022-10-30T14:48:47.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ak的获取方法"><a href="#Ak的获取方法" class="headerlink" title="Ak的获取方法"></a>Ak的获取方法</h2><pre><code>最近在做百度地图API相关的项目，需要用到获取安卓的AK，简单来说就是一种密钥。但是获取的时候踩了些坑，在这里书写下怎么避免。</code></pre><ul><li>首先要注意自己的.android路径，像我的其实放在D盘而不是和百度给的实例一样放在C盘</li><li>要带上jdk路径和-list -v -keystore debug.keystore。这里如果按照百度上来则是**巨坑</li><li>密码是android</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Ak的获取方法&quot;&gt;&lt;a href=&quot;#Ak的获取方法&quot; class=&quot;headerlink&quot; title=&quot;Ak的获取方法&quot;&gt;&lt;/a&gt;Ak的获取方法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;最近在做百度地图API相关的项目，需要用到获取安卓的AK，简单来说就是一种密钥。
但</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sevlet踩坑与范式的理解</title>
    <link href="https://yebingiscn.github.io/2021/11/03/Sevlet%E8%B8%A9%E5%9D%91%E4%B8%8E%E8%8C%83%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://yebingiscn.github.io/2021/11/03/Sevlet%E8%B8%A9%E5%9D%91%E4%B8%8E%E8%8C%83%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2021-11-03T02:57:41.000Z</published>
    <updated>2022-08-18T11:42:49.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><pre><code>最近学到Servlet的时候发现在自己电脑上老是部署不上去，原来还以为是IDEA的问题，于是接连抄了两次作业因为都完成不了。昨晚下决心搞定这个问题，折腾了一晚上终于解决了。原来是Tomcat10把javax.servlet包改了个名字叫jarkata.servlet，如果导入以前的包就会500，提示Class xx is NOT servlet.此外还需要在刚开始建项目的时候选择Java EE9，因为Tomcat10最低支持servlet5.0，而EE8只支持4.0，这样就会报404。最后是一个Tomcat报没有artifact的错误，去configuration添加以外，configuration下面有个框记得点击打勾参考：https://blog.csdn.net/qq_43519779/article/details/115187415</code></pre><hr><h2 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h2><ul><li>一范式：没有可在分的数据项</li><li>二范式：有传递依赖</li><li>三范式：消除了传递依赖</li><li>传递依赖：学号-》系-》系主任即是一种有传递关系的，学号为主码（或者说主键）</li></ul><p>举个例子：<br>一范式：<br>学号（主键）姓名系系主任课程名分数<br>数据冗余：一个学生有好几个字段</p><p>二范式：<br>学号（主键）姓名系系主任<br>学号（主键）课程名分数<br>删除系主任什么都没了<br>无学生光添加系和系主任是不可实现的</p><p>三范式：<br>学号（主键）姓名<br>学号（主键）课程名分数<br>系（主键）系主任</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;踩坑&quot;&gt;&lt;a href=&quot;#踩坑&quot; class=&quot;headerlink&quot; title=&quot;踩坑&quot;&gt;&lt;/a&gt;踩坑&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;最近学到Servlet的时候发现在自己电脑上老是部署不上去，原来还以为是IDEA的问题，于是接连抄了两次作业因为都完成不了。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML学习笔记与C语言的回顾</title>
    <link href="https://yebingiscn.github.io/2021/10/14/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E4%B8%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9B%9E%E9%A1%BE/"/>
    <id>https://yebingiscn.github.io/2021/10/14/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E4%B8%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9B%9E%E9%A1%BE/</id>
    <published>2021-10-14T14:00:12.000Z</published>
    <updated>2022-08-18T11:39:50.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h2><pre><code>今天碰到了一个bug，一个同学跟我说他的提交就报404，我仔细看了下，发现本来应该不变的地址变了。仔细一看原来是form那里多了空格，导致HTML回到了上一级目录自然就报错了。源代码示意：</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot; &quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>作用是将HTML分成一块块</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span> <span class="attr">on</span> <span class="attr">click</span> &gt;</span>#的意思是保留在当前页，on click是单击。</span><br></pre></td></tr></table></figure><hr><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><pre><code>因为操作系统又重新捡起了C语言。有的忘了，但是大多数还记得，虽然我学C的时候其实是学的C++。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;d);<span class="comment">//scanf_svs专用，输入的时候d要添加&amp;</span></span><br><span class="line">println(<span class="string">&quot;%d&quot;</span>,d)</span><br></pre></td></tr></table></figure><ul><li><p>％d整型输出，％ld长整型输出，</p></li><li><p>％o以八进制数形式输出整数，</p></li><li><p>％x以十六进制数形式输出整数，</p></li><li><p>％u以十进制数输出unsigned型数据(无符号数)。</p></li><li><p>％c用来输出一个字符，</p></li><li><p>％s用来输出一个字符串，</p></li><li><p>％f用来输出实数，以小数形式输出，（备注：浮点数是不能定义如的精度的，所以“%6.2f”这种写法是“错误的”！！！）</p></li><li><p>％e以指数形式输出实数，</p></li><li><p>％g根据大小自动选f格式或e格式，且不输出无意义的零。</p></li></ul><h3 id="冒泡排序（C语言）"><a href="#冒泡排序（C语言）" class="headerlink" title="冒泡排序（C语言）"></a>冒泡排序（C语言）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> temp, a[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[j] + <span class="number">1</span>)<span class="comment">//这里都是a[j]不是a[i]</span></span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>] = temp; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML：&quot;&gt;&lt;a href=&quot;#HTML：&quot; class=&quot;headerlink&quot; title=&quot;HTML：&quot;&gt;&lt;/a&gt;HTML：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;今天碰到了一个bug，一个同学跟我说他的提交就报404，我仔细看了下，发现本来应该不变的地址变了。仔</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML中textArea用法与体测</title>
    <link href="https://yebingiscn.github.io/2021/10/10/HTML%E4%B8%ADtextArea%E7%94%A8%E6%B3%95%E4%B8%8E%E4%BD%93%E6%B5%8B/"/>
    <id>https://yebingiscn.github.io/2021/10/10/HTML%E4%B8%ADtextArea%E7%94%A8%E6%B3%95%E4%B8%8E%E4%BD%93%E6%B5%8B/</id>
    <published>2021-10-10T14:35:02.000Z</published>
    <updated>2022-08-18T11:41:30.319Z</updated>
    
    <content type="html"><![CDATA[<pre><code>前段时间断更了，我感觉我关于这些学习的都是会咕咕，好吧，其实碰到了好多东西，比如说体测。从现在来看，基本现在大部分项目都很难及格。我感觉我生晚几年或是去到那些很重视的大学估计就得被淘汰了。现在也加了一个同学的训练班，慢慢练呗。顺便把体重搞上去。</code></pre><hr><p>说回JSP与HTML，一个登录注册搞了一节课实在不应该，主要是还是没有理解JSP的处理，卡住了，不过还是搞出来了。<br>HTML的textArea用法<br>也是在form表单里，但是textArea有点特殊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;textarea&quot;</span> &gt;</span> 这里可以写内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>属性值 描述autofocus     autofocus 规定在页面加载后文本区域自动获得焦点。colsnumber规定文本区内的可见宽度。disableddisabled规定禁用该文本区。formform_id规定文本区域所属的一个或多个表单。maxlength    number规定文本区域的最大字符数。namename_of_textarea规定文本区的名称。placeholder     text规定描述文本区域预期值的简短提示。readonlyreadonly规定文本区为只读。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;前段时间断更了，我感觉我关于这些学习的都是会咕咕，好吧，其实碰到了好多东西，比如说体测。
从现在来看，基本现在大部分项目都很难及格。我感觉我生晚几年或是去到那些很重视的大学估计就得被淘汰了。
现在也加了一个同学的训练班，慢慢练呗。顺便把体重搞上去。
&lt;/co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性表与链表</title>
    <link href="https://yebingiscn.github.io/2021/09/22/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%8E%E9%93%BE%E8%A1%A8/"/>
    <id>https://yebingiscn.github.io/2021/09/22/%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%8E%E9%93%BE%E8%A1%A8/</id>
    <published>2021-09-22T12:14:28.000Z</published>
    <updated>2023-09-12T15:38:40.664Z</updated>
    
    <content type="html"><![CDATA[<p>今天很恼火，但是操作系统这节课被这个问题问住了，在这里记录下</p><p>首先是线性表包含链表，这是一种类型的数据排列的组合，可以理解为数组 plus</p><p>除了头尾节点外，所有的元素包含唯一的前驱和唯一的后驱</p><p>线性表在物理逻辑上包含了两种：顺序存储和链式存储</p><p>链表就是在存储空间上不连续的不分顺序的结构，每个节点都有个指针域指向下一个节点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天很恼火，但是操作系统这节课被这个问题问住了，在这里记录下&lt;/p&gt;
&lt;p&gt;首先是线性表包含链表，这是一种类型的数据排列的组合，可以理解为数组 plus&lt;/p&gt;
&lt;p&gt;除了头尾节点外，所有的元素包含唯一的前驱和唯一的后驱&lt;/p&gt;
&lt;p&gt;线性表在物理逻辑上包含了两种：顺序存储</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML学习笔记2与jsp学习笔记1</title>
    <link href="https://yebingiscn.github.io/2021/09/15/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E4%B8%8EJSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://yebingiscn.github.io/2021/09/15/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E4%B8%8EJSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2021-09-15T15:27:56.000Z</published>
    <updated>2022-08-18T11:35:42.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> 斜体</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">mark</span>&gt;</span> （被标记的/高亮显示的文本）</span><br><span class="line">      </span><br><span class="line">   <span class="comment">&lt;!--&gt;HTML注释</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">   &lt;form action = &quot;&quot;&gt;这里的意思是本页面处理，如果其他的需要就填上链接文件</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">&lt;input type =&gt;GUI里都有checkbox（复选框）需要用数组来接受 request.getParameterValues(&quot;名字&quot;)，其他都用字符串request.getParameter(&quot;名字&quot;)</span></span><br></pre></td></tr></table></figure><hr><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp:"></a>jsp:</h2> <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- --%&gt;jsp注释</span><br><span class="line"></span><br><span class="line">&lt;%!        %&gt;java方法、变量等放的地方</span><br><span class="line"></span><br><span class="line">&lt;%=       %&gt;java求值</span><br><span class="line"></span><br><span class="line">&lt;%          %&gt;  java程序块</span><br><span class="line"></span><br><span class="line">ISO <span class="number">8859</span>-<span class="number">1</span>不能用来接受汉字，因为都是以<span class="number">1</span>个字节来存的，汉字得两个字符，所以会乱码</span><br><span class="line">处理方法为request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">jsp刷新跳转：out.println(<span class="string">&quot;&lt;meta http-equiv=&#x27;refresh&#x27; content = &#x27;5; url=xx.jsp&#x27;&gt;&quot;</span>);</span><br><span class="line">假如想立刻刷新content就为<span class="number">0</span>，url不调整就不填就行了。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML：&quot;&gt;&lt;a href=&quot;#HTML：&quot; class=&quot;headerlink&quot; title=&quot;HTML：&quot;&gt;&lt;/a&gt;HTML：&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式与jsp报错</title>
    <link href="https://yebingiscn.github.io/2021/09/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ejsp%E6%8A%A5%E9%94%99/"/>
    <id>https://yebingiscn.github.io/2021/09/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ejsp%E6%8A%A5%E9%94%99/</id>
    <published>2021-09-13T15:18:41.000Z</published>
    <updated>2023-09-12T15:34:49.112Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天学习了正则表达式，还是比较容易理解的，但是写起来可能还是得查表。要配合起来spilt（字符串分解）就很好用。正则表达式使用起来得用pattern和matcher来搞引用说明：pattern和matcher要用java.util.regex来导入。然后要给Pattern、matcher对象</code></pre><p>举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPriceSum</span><span class="params">(String input)</span> &#123;        <span class="comment">// 定义方法</span></span><br><span class="line">       Pattern pattern;                               <span class="comment">//模式对象</span></span><br><span class="line">       Matcher matcher;                            <span class="comment">//匹配对象</span></span><br><span class="line">       String regex=<span class="string">&quot;-?[0-9][0-9]*[.]?[0-9]*&quot;</span> ;    <span class="comment">//搞一个正则表达式</span></span><br><span class="line">       pattern = Pattern.compile(regex);           <span class="comment">//初试化模式对象，导入筛查式</span></span><br><span class="line">       matcher = pattern.matcher(input);           <span class="comment">//初始化匹配对象,用于检索input</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(matcher.find()) &#123;<span class="comment">//一个字符一个字符看是否符合</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> matcher.group();<span class="comment">//合适的就收集起来，放在group里。再通过str去获取</span></span><br><span class="line">       sum += Double.parseDouble(str);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;麻辣豆腐:20.6元,红烧肉:68.9元&quot;</span>;</span><br><span class="line">&lt;br&gt;&lt;%= str %&gt;&lt;/br&gt;<span class="comment">//导入字符串</span></span><br><span class="line">&lt;br&gt;&lt;b&gt;&lt;i&gt;消费总和:&lt;% = getPriceSum(str) %&gt;&lt;/i&gt;&lt;/b&gt;&lt;/br&gt;<span class="comment">//得出结论</span></span><br></pre></td></tr></table></figure><hr><p>说完了这些说一下 jsp 的报错，今天下午用 IDEA 写 jsp 报错。<br>错误是找不到类，搞了半天，最后发现貌似是 IDEA 的 bug，没有真的导入包，把导入语句删了并且升级了 maven 依赖就运行正常了。所以可能是没升级的问题。</p><hr><p>PS：最近室友都很早睡，我也要跟着早睡！健康作息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;今天学习了正则表达式，还是比较容易理解的，但是写起来可能还是得查表。
要配合起来spilt（字符串分解）就很好用。正则表达式使用起来得用pattern和matcher来搞
引用说明：pattern和matcher要用java.util.regex来导入。
然</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>踩坑记</title>
    <link href="https://yebingiscn.github.io/2021/09/11/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://yebingiscn.github.io/2021/09/11/%E8%B8%A9%E5%9D%91%E8%AE%B0/</id>
    <published>2021-09-11T10:37:50.000Z</published>
    <updated>2022-08-18T11:43:28.749Z</updated>
    
    <content type="html"><![CDATA[<pre><code> 这两天把博客装修好了推送上去，大概花了三个晚上加一个上午 特别感谢这个链接，把我的那些图片什么的没改好的通通都说明了怎么改 https://blog.csdn.net/qq_38157825/article/details/112783083 感谢这位作者 期间还经历了不少问题，但都仔细看了代码一一解决了</code></pre><hr><pre><code> 改完之后由于不小心动了_config.yml的配置，就是那个url，导致路径错误，找不到js和css文件，搞了好多方法，上去网上看了好多方法。 最后接近放弃的时候，仔细看了public文件里index.html各个文章的路径，发现了究竟得怎么改回去，就成功了 原来是url指向的是我的仓库地址，后来改了之变成了博客网址。也不认识url上面的英文，结果就乱改了</code></pre><hr><p> 总结了几个点：</p><ol><li>还是要仔细看下错误原因，往往都比较“因地制宜”</li><li>仔细复盘多进行比对</li><li>英文还是要加油</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt; 这两天把博客装修好了推送上去，大概花了三个晚上加一个上午
 特别感谢这个链接，把我的那些图片什么的没改好的通通都说明了怎么改
 https://blog.csdn.net/qq_38157825/article/details/112783083
 感谢这</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML学习笔记1</title>
    <link href="https://yebingiscn.github.io/2021/09/09/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://yebingiscn.github.io/2021/09/09/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2021-09-09T12:16:53.000Z</published>
    <updated>2022-08-18T11:32:35.297Z</updated>
    
    <content type="html"><![CDATA[<pre><code>不知不觉就大三了，博客也鸽了很久，还是写写，当个参考，定个小目标吧，两天更新一篇，最近在学JSP里的HTML，我发现我不是很熟，在这里整理一下很多内容都来自蓝桥课程的HTML教程，推荐学习！</code></pre><ol><li><p>标签 <p>这是个标签</p></p></li><li><p>标题标题有六种，他们的主要区别是字体大小不同</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span>&gt;</span>我是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>我是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图片图片放置方式：<img src="图片地址"/> 。</p></li><li><p>跳转跳转<a href="https://www.xxx.cn/">xxx</a></p></li><li><p>填充<div style="width:200px;height:200px;background:pink">块级元素</div><br>      这里作用是填充一块区域</p></li><li><p>换行不产生一个新段落下换行:：<br/> 。使用空格使用 ：&nbsp; 字符。</p></li><li><p>水平分割线<hr/> 创建一条水平线</p></li><li><p>span<span>这是span标签，不自动换行</span></p></li><li><p>列表他们的区别是无序列表没数字而是用·，有序列表用数字（当然也可以自定义）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">------</span><br><span class="line">如果想更换样式加上这个 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">-----------</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>一个自定义列表：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>春天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>《-这是标题</span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>是万物复苏，百花争艳的季节<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    《-这是内容</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>夏天<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>是夏日绵绵，烈日炎炎的季节<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">---------------------------------</span><br><span class="line">自定义可选项</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> 标签的 type 属性：</span><br><span class="line">值 备注</span><br><span class="line">disc（默认） 实心圆</span><br><span class="line">circle 空心圆</span><br><span class="line">square 小方块</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span> 标签的 type 属性：</span><br><span class="line">值 备注</span><br><span class="line">1（默认） 数字表示（1，2，3...)</span><br><span class="line">A 大写字母表示（A,B,C...)</span><br><span class="line">a 小写字母表示（a,b,c...)</span><br><span class="line">I 大写罗马数字表示(I,II,III…)</span><br><span class="line">i 小写罗马数字表示(i,ii,iii…)</span><br></pre></td></tr></table></figure></li><li><p>背景颜色 <p style="background-color:red">test</p></p></li><li><p>居中对齐<h1 style="text-align:center">test</h1></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;不知不觉就大三了，博客也鸽了很久，还是写写，当个参考，定个小目标吧，两天更新一篇，最近在学JSP里的HTML，我发现我不是很熟，在这里整理一下
很多内容都来自蓝桥课程的HTML教程，推荐学习！
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;标签 	&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++基础练习</title>
    <link href="https://yebingiscn.github.io/2021/02/24/Cpp%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/"/>
    <id>https://yebingiscn.github.io/2021/02/24/Cpp%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</id>
    <published>2021-02-24T04:43:35.000Z</published>
    <updated>2023-09-12T15:35:27.372Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>用代码实现从 1+2*3&#x2F;4 的运算过程及结果，并打印</p></li><li><p>用代码实现变量 a 和变量 b 值的交换，并打印最终 a 和 b 的值</p></li><li><p>随意输入两个数，比较第一个数和第二个数的大小并打印。</p></li><li><p>随意输入一个数，判断这个数是奇数还是偶数，并打印。</p></li><li><p>判断一个数字是否能被 5 和 6 同时整除，并打印。</p></li><li><p>输入一个 0-100 的分数，如果不是 0-100 之间，打印分数无效，根据分数等级打印出“不及格（0-59）”“及格（60-79）”“优秀（80-100）”</p></li><li><p>随意输入三个不相同的数字，求出三个数中的最小值并打印。</p></li><li><p>使用 while 循环打印出 1-100 中 3 的倍数。</p></li><li><p>计算 1+2+3+4+…+100 的总和并打印。</p></li><li><p>编一个程序，输出 1-100 中能够整除 3 但不能整除 5 的数，并统计有多少个这样的数。</p></li><li><p>输入 1-12 随意一个数判断是什么季节并打印。</p></li><li><p>编一个程序，求出 1-6000 之间能够满足“用 3 除余 2，用 5 除余 3，用 7 除余 2”的数，要求每行输出 5 个数。<br>这上面都太简单了，不写了</p></li><li><p>在不使用第三方变量的情况下，用代码实现变量 a 和变量 b 值的交换，并打印。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p>随意输入一个 0-1000 的数字，并使用代码算出各个位上的数字的和，并打印</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; a &lt; <span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span>, d=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">b = a % <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;错误&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p>国王向大臣许诺，64 个格子中放米，第一个格子放 1 粒，第二个格子放 2 粒，第三个格子放 4 粒，最终国王的诺言能实现吗？打印过程<br>这个还行</p></li><li><p>编一个程序，求出 1！+2！+…+n!</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = a; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (a &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b = a * (a - <span class="number">1</span>);</span><br><span class="line">c = b + c;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line">a = i;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="17"><li><p>编一个程序，输入 8 个数，要求找出最大数和次大数。</p></li><li><p>编一个程序，利用 for 语句，打印一个等腰三角形，顶点在屏幕中线上，行从键盘输入。</p></li><li><p>编一个程序，找出 1-99 之间所有的同构数，同构数是：它出现在平方数的右边。</p></li><li><p>遍一个程序，输入十个数，用冒泡排序方法按降序输出。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>; j &gt;= I; j++)</span><br><span class="line">&#123;</span><br><span class="line">t = R[j];</span><br><span class="line">R[j] = R[j+<span class="number">1</span>];</span><br><span class="line">R[j+<span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用代码实现从 1+2*3&amp;#x2F;4 的运算过程及结果，并打印&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用代码实现变量 a 和变量 b 值的交换，并打印最终 a 和 b 的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随意输入两个数，比较第一个数和第二个数的大小并打印</summary>
      
    
    
    
    
  </entry>
  
</feed>
